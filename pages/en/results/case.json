{
  "id": "msg_01Aomf7Q1KafSZJmRiAKjRKg",
  "content": [
    {
      "text": "# case command\n\nPerforms conditional branching based on pattern matching in shell scripts.\n\n## Overview\n\nThe `case` statement is a shell construct that allows for multiple conditional branches based on pattern matching. It's more readable and efficient than multiple `if-else` statements when comparing a single value against multiple patterns. The `case` statement is commonly used in shell scripts to handle command-line arguments, menu selections, or any situation requiring multiple condition checks.\n\n## Syntax\n\n```bash\ncase WORD in\n  PATTERN1)\n    COMMANDS1\n    ;;\n  PATTERN2)\n    COMMANDS2\n    ;;\n  *)\n    DEFAULT_COMMANDS\n    ;;\nesac\n```\n\n## Usage Examples\n\n### Basic Pattern Matching\n\n```console\n$ cat example.sh\n#!/bin/bash\nfruit=\"apple\"\n\ncase \"$fruit\" in\n  \"apple\")\n    echo \"It's an apple.\"\n    ;;\n  \"banana\")\n    echo \"It's a banana.\"\n    ;;\n  *)\n    echo \"It's something else.\"\n    ;;\nesac\n\n$ ./example.sh\nIt's an apple.\n```\n\n### Multiple Patterns for One Action\n\n```console\n$ cat example2.sh\n#!/bin/bash\nfruit=\"pear\"\n\ncase \"$fruit\" in\n  \"apple\"|\"pear\"|\"peach\")\n    echo \"It's a pome or stone fruit.\"\n    ;;\n  \"banana\"|\"pineapple\")\n    echo \"It's a tropical fruit.\"\n    ;;\n  *)\n    echo \"Unknown fruit type.\"\n    ;;\nesac\n\n$ ./example2.sh\nIt's a pome or stone fruit.\n```\n\n### Command-Line Argument Handling\n\n```console\n$ cat options.sh\n#!/bin/bash\n\ncase \"$1\" in\n  -h|--help)\n    echo \"Usage: $0 [OPTION]\"\n    echo \"Options:\"\n    echo \"  -h, --help     Display this help message\"\n    echo \"  -v, --version  Display version information\"\n    ;;\n  -v|--version)\n    echo \"Version 1.0\"\n    ;;\n  *)\n    echo \"Unknown option: $1\"\n    echo \"Use --help for more information.\"\n    ;;\nesac\n\n$ ./options.sh --help\nUsage: ./options.sh [OPTION]\nOptions:\n  -h, --help     Display this help message\n  -v, --version  Display version information\n```\n\n### Pattern Matching with Wildcards\n\n```console\n$ cat wildcard.sh\n#!/bin/bash\nfilename=\"document.txt\"\n\ncase \"$filename\" in\n  *.txt)\n    echo \"Text file\"\n    ;;\n  *.jpg|*.png|*.gif)\n    echo \"Image file\"\n    ;;\n  *.sh)\n    echo \"Shell script\"\n    ;;\n  *)\n    echo \"Unknown file type\"\n    ;;\nesac\n\n$ ./wildcard.sh\nText file\n```\n\n## Tips\n\n### Use Fall-Through with ;& or ;&& (Bash 4+)\n\nIn Bash 4 and later, you can use `;& ` to continue to the next pattern without testing it, or `;&& ` to test the next pattern:\n\n```bash\ncase \"$var\" in\n  pattern1)\n    echo \"Matches pattern1\"\n    ;& # Fall through to next pattern\n  pattern2)\n    echo \"This will execute if pattern1 matches\"\n    ;;\nesac\n```\n\n### Combine Patterns with Pipe Symbol\n\nUse the pipe symbol `|` to match multiple patterns for the same action:\n\n```bash\ncase \"$var\" in\n  yes|y|Y)\n    echo \"Affirmative\"\n    ;;\nesac\n```\n\n### Always Include a Default Case\n\nInclude a default case using `*` to handle unexpected inputs:\n\n```bash\ncase \"$var\" in\n  # other patterns\n  *)\n    echo \"No match found\"\n    ;;\nesac\n```\n\n### Use Quotes Around Variables\n\nAlways quote your variables to prevent word splitting and globbing:\n\n```bash\ncase \"$variable\" in\n  # patterns\nesac\n```\n\n## Frequently Asked Questions\n\n#### Q1. How does `case` differ from `if-else` statements?\nA. `case` is more readable and efficient when comparing a single value against multiple patterns. It's designed specifically for pattern matching rather than general conditional logic.\n\n#### Q2. Can I use regular expressions in `case` patterns?\nA. `case` uses shell pattern matching (globbing), not regular expressions. You can use wildcards like `*`, `?`, and character classes like `[a-z]`, but not regex syntax like `+` or `\\d`.\n\n#### Q3. How do I match any pattern in a `case` statement?\nA. Use `*` as the pattern to match anything. This is commonly used as the default case.\n\n#### Q4. Can I use `case` with numeric comparisons?\nA. Yes, but you need to be careful with the syntax. For example:\n```bash\ncase $number in\n  [0-9]) echo \"Single digit\" ;;\n  [0-9][0-9]) echo \"Two digits\" ;;\n  *) echo \"More than two digits or not a number\" ;;\nesac\n```\n\n## References\n\nhttps://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html\n\n## Revisions\n\n- 2025/05/06 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1632,
    "output_tokens": 1293
  }
}