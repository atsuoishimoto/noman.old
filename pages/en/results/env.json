{
  "id": "msg_012ppjbpwZEGQ3Tatc6tNngb",
  "content": [
    {
      "text": "# env command\n\nDisplay the current environment variables or run a command in a modified environment.\n\n## Overview\n\nThe `env` command displays all environment variables in the current shell session. It can also be used to run a program with a modified environment by setting or unsetting variables without affecting the current shell environment.\n\n## Options\n\n### **-i, --ignore-environment**\n\nStart with an empty environment, ignoring inherited environment variables.\n\n```console\n$ env -i bash -c 'echo $PATH'\n\n```\n\n### **-u, --unset=NAME**\n\nRemove variable NAME from the environment.\n\n```console\n$ env -u HOME bash -c 'echo $HOME'\n\n```\n\n### **-0, --null**\n\nEnd each output line with a null character instead of a newline.\n\n```console\n$ env -0 | grep -z USER\nUSER=username\n```\n\n### **--**\n\nTerminate option list. Useful when command to run has options that might be interpreted by env.\n\n```console\n$ env -- ls -la\ntotal 32\ndrwxr-xr-x  5 user  staff   160 May  5 10:30 .\ndrwxr-xr-x  3 user  staff    96 May  4 09:15 ..\n-rw-r--r--  1 user  staff  1024 May  5 10:25 file.txt\n```\n\n## Usage Examples\n\n### Displaying all environment variables\n\n```console\n$ env\nUSER=username\nHOME=/home/username\nPATH=/usr/local/bin:/usr/bin:/bin\nSHELL=/bin/bash\n...\n```\n\n### Running a command with a modified environment\n\n```console\n$ env VAR1=value1 VAR2=value2 bash -c 'echo $VAR1 $VAR2'\nvalue1 value2\n```\n\n### Running a command with a clean environment\n\n```console\n$ env -i PATH=/bin bash -c 'echo $PATH; env'\n/bin\nPATH=/bin\n```\n\n## Tips:\n\n### Debugging Environment Issues\n\nUse `env` to check if environment variables are set correctly when troubleshooting application startup problems.\n\n### Isolating Environment Variables\n\nWhen testing applications, use `env -i` with only the required variables to create a controlled environment for reproducible testing.\n\n### Comparing Environments\n\nRedirect the output of `env` to files to compare environment variables between different users or systems:\n```console\n$ env > env_user1.txt\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `env` and `printenv`?\nA. Both display environment variables, but `env` can also run commands with modified environments, while `printenv` is focused solely on displaying variables.\n\n#### Q2. How do I set an environment variable only for a specific command?\nA. Use `env VAR=value command`, which sets the variable only for that command's execution without affecting your current shell.\n\n#### Q3. How can I run a command with no environment variables?\nA. Use `env -i command`, which starts with an empty environment. You may need to add PATH to make the command executable.\n\n#### Q4. Can I use `env` in shell scripts?\nA. Yes, it's useful in shell scripts when you need to run commands with specific environment settings without changing the script's environment.\n\n## References\n\nhttps://www.gnu.org/software/coreutils/manual/html_node/env-invocation.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1678,
    "output_tokens": 814
  }
}