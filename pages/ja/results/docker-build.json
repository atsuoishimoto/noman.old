{
  "id": "msg_01NSTBsnueKfUCLwmDbEEEVm",
  "content": [
    {
      "text": "# docker build コマンド\n\nDockerfileからイメージをビルドします。\n\n## 概要\n\n`docker build`コマンドは、DockerfileとコンテキストからDockerイメージをビルドします。コンテキストとは、指定されたPATHまたはURLにある一連のファイルのことです。ビルドプロセスはコンテキスト内のどのファイルも参照できます。Dockerfileには、Dockerが新しいイメージを作成するために使用する命令が含まれています。\n\n## オプション\n\n### **-t, --tag**\n\nビルドしたイメージに名前を付け、オプションでタグを「name:tag」形式で指定します。\n\n```console\n$ docker build -t myapp:1.0 .\n[+] Building 10.5s (10/10) FINISHED\n => [internal] load build definition from Dockerfile                       0.1s\n => => transferring dockerfile: 215B                                       0.0s\n => [internal] load .dockerignore                                          0.0s\n => => transferring context: 2B                                            0.0s\n => [internal] load metadata for docker.io/library/node:14                 1.2s\n => [1/5] FROM docker.io/library/node:14@sha256:fcb6...                    0.0s\n => [internal] load build context                                          0.0s\n => => transferring context: 32B                                           0.0s\n => CACHED [2/5] WORKDIR /app                                              0.0s\n => [3/5] COPY package*.json ./                                            0.1s\n => [4/5] RUN npm install                                                  8.5s\n => [5/5] COPY . .                                                         0.1s\n => exporting to image                                                     0.5s\n => => exporting layers                                                    0.4s\n => => writing image sha256:a72d...                                        0.0s\n => => naming to docker.io/library/myapp:1.0                               0.0s\n```\n\n### **-f, --file**\n\nDockerfileの名前を指定します（デフォルトは「PATH/Dockerfile」）。\n\n```console\n$ docker build -f Dockerfile.prod -t myapp:prod .\n[+] Building 12.3s (10/10) FINISHED\n => [internal] load build definition from Dockerfile.prod                  0.1s\n => => transferring dockerfile: 256B                                       0.0s\n...\n```\n\n### **--no-cache**\n\nイメージのビルド時にキャッシュを使用しません。\n\n```console\n$ docker build --no-cache -t myapp .\n[+] Building 25.7s (10/10) FINISHED\n => [internal] load build definition from Dockerfile                       0.1s\n...\n```\n\n### **--pull**\n\n常に新しいバージョンのイメージを取得しようとします。\n\n```console\n$ docker build --pull -t myapp .\n[+] Building 15.2s (10/10) FINISHED\n => [internal] load build definition from Dockerfile                       0.1s\n => [internal] load .dockerignore                                          0.0s\n => [internal] load metadata for docker.io/library/node:14                 1.5s\n => [1/5] FROM docker.io/library/node:14@sha256:fcb6... DONE              10.2s\n...\n```\n\n### **--build-arg**\n\nDockerfileのARG命令で定義されたビルド時変数を設定します。\n\n```console\n$ docker build --build-arg NODE_ENV=production -t myapp .\n[+] Building 11.8s (10/10) FINISHED\n => [internal] load build definition from Dockerfile                       0.1s\n...\n```\n\n### **--target**\n\nマルチステージビルドを使用する場合に、ビルドするターゲットビルドステージを設定します。\n\n```console\n$ docker build --target development -t myapp:dev .\n[+] Building 8.3s (8/8) FINISHED\n => [internal] load build definition from Dockerfile                       0.1s\n => [internal] load .dockerignore                                          0.0s\n => [internal] load metadata for docker.io/library/node:14                 1.2s\n => [1/5] FROM docker.io/library/node:14@sha256:fcb6...                    0.0s\n => [2/5] WORKDIR /app                                                     0.1s\n => [3/5] COPY package*.json ./                                            0.1s\n => [4/5] RUN npm install                                                  6.5s\n => exporting to image                                                     0.3s\n...\n```\n\n## 使用例\n\n### タグ付きでイメージをビルドする\n\n```console\n$ docker build -t myapp:latest .\n[+] Building 15.2s (10/10) FINISHED\n...\n```\n\n### 複数のタグでビルドする\n\n```console\n$ docker build -t myapp:latest -t myapp:1.0 -t registry.example.com/myapp:1.0 .\n[+] Building 14.7s (10/10) FINISHED\n...\n=> => naming to docker.io/library/myapp:latest                             0.0s\n=> => naming to docker.io/library/myapp:1.0                                0.0s\n=> => naming to registry.example.com/myapp:1.0                             0.0s\n```\n\n### 特定のDockerfileとコンテキストからビルドする\n\n```console\n$ docker build -f ./docker/Dockerfile.prod -t myapp:prod ./app\n[+] Building 18.3s (10/10) FINISHED\n...\n```\n\n### ビルド引数を使用してビルドする\n\n```console\n$ docker build --build-arg VERSION=1.0.0 --build-arg ENV=staging -t myapp:staging .\n[+] Building 16.5s (10/10) FINISHED\n...\n```\n\n## ヒント\n\n### .dockerignoreファイルを使用する\n\n`.dockerignore`ファイルを作成して、ビルドコンテキストからファイルやディレクトリを除外しましょう。これにより、不要なファイルがDockerデーモンに送信されるのを防ぎ、ビルド時間とサイズを削減できます。\n\n### ビルドキャッシュを活用する\n\nDockerは中間レイヤーをキャッシュします。キャッシュの使用を最大化するためにDockerfileの命令を順序付けしましょう - 頻繁に変更される命令（ソースコードのコピーなど）は、あまり変更されない命令（依存関係のインストールなど）の後に配置します。\n\n### マルチステージビルド\n\nマルチステージビルドを使用して、より小さな本番イメージを作成しましょう。最初のステージにはビルドツールと依存関係を含め、最終ステージにはアプリケーションの実行に必要なものだけを含めることができます。\n\n```dockerfile\nFROM node:14 AS build\nWORKDIR /app\nCOPY . .\nRUN npm ci && npm run build\n\nFROM nginx:alpine\nCOPY --from=build /app/dist /usr/share/nginx/html\n```\n\n### レイヤー数を最小限に抑える\n\n関連するコマンドを`&&`を使用して単一のRUN命令にまとめることで、イメージのレイヤー数を減らしましょう。\n\n## よくある質問\n\n#### Q1. `docker build`と`docker image build`の違いは何ですか？\nA. 同じコマンドです。`docker image build`はより明示的な形式ですが、`docker build`の方がより一般的に使用されています。\n\n#### Q2. リモートのGitリポジトリからイメージをビルドするにはどうすればよいですか？\nA. GitのURLを使って`docker build`を使用します：`docker build https://github.com/username/repo.git#branch:folder`\n\n#### Q3. Dockerイメージのサイズを減らすにはどうすればよいですか？\nA. マルチステージビルドの使用、より小さなベースイメージ（Alpineなど）の使用、パッケージをインストールしたのと同じレイヤーでクリーンアップする、`.dockerignore`を使用して不要なファイルを除外するなどの方法があります。\n\n#### Q4. マルチステージDockerfileで特定のステージをビルドするにはどうすればよいですか？\nA. `--target`フラグを使用します：`docker build --target stage-name -t myimage .`\n\n#### Q5. x86マシン上でARMイメージをビルドできますか？\nA. はい、`--platform`フラグを使用します：`docker build --platform linux/arm64 -t myimage .`（Docker BuildKitが必要です）\n\n## 参考資料\n\nhttps://docs.docker.com/engine/reference/commandline/build/\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 2055,
    "output_tokens": 2470
  }
}