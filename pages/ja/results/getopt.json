{
  "id": "msg_01Kdw2gyJkV41Von9nbckehR",
  "content": [
    {
      "text": "# getoptコマンド\n\nシェルスクリプトでコマンドラインオプションを解析します。\n\n## 概要\n\n`getopt`は、指定された形式に従ってコマンドライン引数を解析するコマンドラインユーティリティで、シェルスクリプトでオプションを扱いやすくします。引数を標準的な形式に並べ替えることで、オプション処理を標準化し、より簡単に処理できるようにします。\n\n## オプション\n\n### **-o, --options**\n\n認識する短いオプションを指定します\n\n```console\n$ getopt -o ab:c:: -- -a -b value -c\n -a -b 'value' -c -- \n```\n\n### **-l, --longoptions**\n\n認識する長いオプションを指定します\n\n```console\n$ getopt -o a -l alpha,beta: -- --alpha --beta=value\n -a --beta 'value' -- \n```\n\n### **-n, --name**\n\nエラーメッセージで使用される名前を設定します\n\n```console\n$ getopt -n myscript -o a -- -x\nmyscript: invalid option -- 'x'\n```\n\n### **-q, --quiet**\n\nエラーメッセージを抑制します\n\n```console\n$ getopt -q -o a -- -x\n -- 'x'\n```\n\n### **-Q, --quiet-output**\n\n通常の出力を抑制します（有効なオプションの確認時に便利）\n\n```console\n$ getopt -Q -o a -- -a\n```\n\n### **-u, --unquoted**\n\n引用符なしの出力を生成します（推奨されません）\n\n```console\n$ getopt -u -o a:b: -- -a foo -b bar\n -a foo -b bar -- \n```\n\n### **-T, --test**\n\nテストモード：解析されたパラメータを出力して終了します\n\n```console\n$ getopt -T -o a:b: -- -a foo -b bar\ngetopt -o 'a:b:' -- '-a' 'foo' '-b' 'bar'\n```\n\n## 使用例\n\n### シェルスクリプトでの基本的なオプション解析\n\n```console\n$ cat example.sh\n#!/bin/bash\nOPTS=$(getopt -o ab:c: --long alpha,beta:,gamma: -n 'example.sh' -- \"$@\")\neval set -- \"$OPTS\"\n\nwhile true; do\n  case \"$1\" in\n    -a | --alpha ) ALPHA=1; shift ;;\n    -b | --beta ) BETA=\"$2\"; shift 2 ;;\n    -c | --gamma ) GAMMA=\"$2\"; shift 2 ;;\n    -- ) shift; break ;;\n    * ) break ;;\n  esac\ndone\n\necho \"Alpha: $ALPHA\"\necho \"Beta: $BETA\"\necho \"Gamma: $GAMMA\"\necho \"Remaining arguments: $@\"\n\n$ ./example.sh -a --beta=value arg1 arg2\nAlpha: 1\nBeta: value\nGamma: \nRemaining arguments: arg1 arg2\n```\n\n### 必須オプションの処理\n\n```console\n$ cat required.sh\n#!/bin/bash\nOPTS=$(getopt -o f: --long file: -n 'required.sh' -- \"$@\")\neval set -- \"$OPTS\"\n\nFILE=\"\"\nwhile true; do\n  case \"$1\" in\n    -f | --file ) FILE=\"$2\"; shift 2 ;;\n    -- ) shift; break ;;\n    * ) break ;;\n  esac\ndone\n\nif [ -z \"$FILE\" ]; then\n  echo \"Error: -f/--file option is required\"\n  exit 1\nfi\n\necho \"Processing file: $FILE\"\n\n$ ./required.sh -f data.txt\nProcessing file: data.txt\n\n$ ./required.sh\nError: -f/--file option is required\n```\n\n## ヒント:\n\n### 拡張getoptを使用する\n\n最新のLinuxシステムでは長いオプションをサポートする拡張getoptが使用されています。一部のシステム（macOSなど）の従来のgetoptでは、すべての機能がサポートされていない場合があります。\n\n### 常に変数を引用符で囲む\n\ngetoptに引数を渡す際は、スペースを正しく処理するために常に変数を引用符で囲みます：\n```bash\ngetopt -o a:b: -- \"$@\"\n```\n\n### エラーを適切に処理する\n\nエラーメッセージ用にスクリプト名を提供するために`-n`オプションを使用し、無効なオプションを処理するためにgetoptの終了ステータスをチェックします：\n```bash\nOPTS=$(getopt -o a:b: -n 'myscript' -- \"$@\") || exit 1\n```\n\n### オプション構文を理解する\n\nオプション文字列では：\n- 単一の文字はフラグオプションを意味します（例：`-a`）\n- 文字の後にコロンが続く場合は、必須引数を持つオプションを意味します（例：`-b value`）\n- 文字の後に2つのコロンが続く場合は、オプションの引数を持つオプションを意味します（例：`-c[value]`）\n\n## よくある質問\n\n#### Q1. `getopt`と`getopts`の違いは何ですか？\nA. `getopt`は短いオプションと長いオプションの両方をサポートする外部コマンドであるのに対し、`getopts`は短いオプションのみをサポートするシェル組み込みコマンドですが、異なるUnix系システム間での移植性が高いです。\n\n#### Q2. スクリプトが「getopt: invalid option」エラーで失敗するのはなぜですか？\nA. 長いオプションやその他の拡張機能をサポートしていない従来のgetopt（macOSで一般的）を使用している可能性があります。ほとんどのLinuxディストリビューションで利用可能な拡張getoptを使用してみてください。\n\n#### Q3. オプションの引数を持つオプションをどのように処理しますか？\nA. オプション指定でダブルコロンを使用します：短いオプションの場合は`-o a::`、長いオプションの場合は`--longoptions=alpha::`。\n\n#### Q4. オプションと非オプション引数をどのように区別しますか？\nA. `--`を使用してオプションの終わりをマークします。`--`の後の引数はすべて非オプション引数として扱われます。\n\n## 参考文献\n\nhttps://man7.org/linux/man-pages/man1/getopt.1.html\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1509,
    "output_tokens": 1864
  }
}