{
  "id": "msg_01WtVzDjcxzm64MNsAz7nbia",
  "content": [
    {
      "text": "# tail コマンド\n\nファイルの末尾部分を表示します。\n\n## 概要\n\n`tail` コマンドは、1つ以上のファイルの末尾部分（デフォルトでは10行）を出力します。ログファイルの最新エントリの確認、ファイル変更のリアルタイム監視、またはファイル全体を開かずにテキストファイルの末尾を確認するのによく使用されます。\n\n## オプション\n\n### **-n, --lines=NUM**\n\n末尾からNUM行を出力します（デフォルトは10行）\n\n```console\n$ tail -n 5 /var/log/syslog\nMay  5 10:15:22 hostname service[1234]: Processing request\nMay  5 10:15:23 hostname service[1234]: Request completed\nMay  5 10:15:25 hostname service[1234]: New connection from 192.168.1.5\nMay  5 10:15:26 hostname service[1234]: Processing request\nMay  5 10:15:27 hostname service[1234]: Request completed\n```\n\n### **-f, --follow**\n\nファイルが成長するにつれて追加されたデータを出力します。ログファイルの監視に便利です\n\n```console\n$ tail -f /var/log/apache2/access.log\n192.168.1.5 - - [05/May/2025:10:15:22 +0000] \"GET /index.html HTTP/1.1\" 200 2326\n192.168.1.6 - - [05/May/2025:10:15:25 +0000] \"GET /images/logo.png HTTP/1.1\" 200 4589\n192.168.1.7 - - [05/May/2025:10:15:27 +0000] \"POST /login HTTP/1.1\" 302 -\n```\n\n### **-c, --bytes=NUM**\n\n末尾からNUMバイトを出力します\n\n```console\n$ tail -c 20 file.txt\nend of the file.\n```\n\n### **-q, --quiet, --silent**\n\nファイル名を示すヘッダーを出力しません\n\n```console\n$ tail -q file1.txt file2.txt\nLast line of file1\nLast line of file2\n```\n\n### **--pid=PID**\n\n-fと共に使用すると、プロセスID（PID）が終了した後に終了します\n\n```console\n$ tail -f --pid=1234 logfile.txt\n```\n\n## 使用例\n\n### 複数のログファイルを同時に監視する\n\n```console\n$ tail -f /var/log/syslog /var/log/auth.log\n==> /var/log/syslog <==\nMay  5 10:20:22 hostname service[1234]: Processing request\n\n==> /var/log/auth.log <==\nMay  5 10:20:25 hostname sshd[5678]: Accepted publickey for user from 192.168.1.10\n```\n\n### 行番号付きで末尾20行を表示する\n\n```console\n$ tail -n 20 file.txt | nl\n     1  Line content here\n     2  More content here\n     ...\n     20 Last line here\n```\n\n### プロセスが終了したときに停止するログファイルの監視\n\n```console\n$ tail -f --pid=$(pgrep apache2) /var/log/apache2/access.log\n```\n\n## ヒント:\n\n### grepと組み合わせてフィルタリングする\n\n`tail -f logfile.txt | grep ERROR` を使用して、ログファイルをリアルタイムで監視しながら「ERROR」を含む行のみを表示します。\n\n### headと組み合わせて中間部分を取得する\n\n`head -n 20 file.txt | tail -n 10` でファイルの中間部分（11〜20行目）を抽出できます。\n\n### 複数ファイルを効率的に監視する\n\n`tail -f` で複数のログファイルを監視する場合、`--retry` を使用するとファイルが一時的にアクセス不能になり、後で再表示された場合も継続して監視できます。\n\n### フォローモードを適切に終了する\n\n監視が終わったら、Ctrl+Cを押してtailのフォローモードを終了します。\n\n## よくある質問\n\n#### Q1. ファイルの最後の10行を表示するにはどうすればよいですか？\nA. 単に `tail ファイル名` または `tail -n 10 ファイル名` を使用します。\n\n#### Q2. ログファイルの変更をリアルタイムで監視するにはどうすればよいですか？\nA. `tail -f logfile.txt` を使用して、新しいコンテンツが追加されるとリアルタイムでファイルを監視します。\n\n#### Q3. 複数のファイルを一度に監視できますか？\nA. はい、`tail -f file1.txt file2.txt` を使用して複数のファイルを同時に監視できます。\n\n#### Q4. 末尾から特定の行数を表示するにはどうすればよいですか？\nA. `tail -n 数字 ファイル名` を使用します。「数字」は表示したい行数です。\n\n#### Q5. tailのフォローモードを終了するにはどうすればよいですか？\nA. フォローモード中にCtrl+Cを押してtailコマンドを終了します。\n\n## 参考文献\n\nhttps://www.gnu.org/software/coreutils/manual/html_node/tail-invocation.html\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1279,
    "output_tokens": 1556
  }
}