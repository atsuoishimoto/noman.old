{
  "id": "msg_01XFanXp57RxDDa17Hu98zwV",
  "content": [
    {
      "text": "# wgetコマンド\n\nHTTPやHTTPS、FTPプロトコルを介してウェブからファイルをダウンロードします。\n\n## 概要\n\n`wget`は、ウェブからファイルをダウンロードするための非対話型コマンドラインユーティリティです。HTTP、HTTPS、FTPプロトコルをサポートし、バックグラウンドで動作したり、中断されたダウンロードを再開したり、ウェブサイト内のリンクをたどったりすることができます。特に、バッチダウンロード、ウェブサイトのミラーリング、スクリプト内でのファイル取得に便利です。\n\n## オプション\n\n### **-O, --output-document=FILE**\n\nリモート名に基づいてファイルを作成する代わりに、ドキュメントをFILEに書き込みます。\n\n```console\n$ wget -O latest-linux.iso https://example.com/downloads/linux.iso\n--2025-05-05 10:15:32--  https://example.com/downloads/linux.iso\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1073741824 (1.0G) [application/octet-stream]\nSaving to: 'latest-linux.iso'\n\nlatest-linux.iso    100%[===================>]   1.00G  5.25MB/s    in 3m 15s  \n\n2025-05-05 10:18:47 (5.25 MB/s) - 'latest-linux.iso' saved [1073741824/1073741824]\n```\n\n### **-c, --continue**\n\n部分的にダウンロードされたファイルの取得を再開します。\n\n```console\n$ wget -c https://example.com/large-file.zip\n--2025-05-05 10:20:12--  https://example.com/large-file.zip\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 206 Partial Content\nLength: 104857600 (100M), 52428800 (50M) remaining [application/zip]\nSaving to: 'large-file.zip'\n\nlarge-file.zip      50%[======>           ]  50.00M  3.15MB/s    in 16s     \n\n2025-05-05 10:20:28 (3.15 MB/s) - 'large-file.zip' saved [104857600/104857600]\n```\n\n### **-b, --background**\n\n起動後すぐにバックグラウンドに移行します。\n\n```console\n$ wget -b https://example.com/huge-archive.tar.gz\nContinuing in background, pid 1234.\nOutput will be written to 'wget-log'.\n```\n\n### **-r, --recursive**\n\n再帰的な取得（ウェブサイトのディレクトリ全体をダウンロード）を有効にします。\n\n```console\n$ wget -r -np https://example.com/docs/\n--2025-05-05 10:25:45--  https://example.com/docs/\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 8192 (8.0K) [text/html]\nSaving to: 'example.com/docs/index.html'\n\nexample.com/docs/index.html    100%[===================>]   8.00K  --.-KB/s    in 0.1s    \n\n2025-05-05 10:25:46 (80.0 KB/s) - 'example.com/docs/index.html' saved [8192/8192]\n\n... [more files downloaded] ...\n```\n\n### **-np, --no-parent**\n\n再帰的に取得する際に親ディレクトリに上がらないようにします。\n\n```console\n$ wget -r -np https://example.com/docs/\n```\n\n### **-m, --mirror**\n\nミラーリングに適したオプションを有効にします：再帰的、タイムスタンプ付き、無限の再帰深度、FTPディレクトリリスティングの保存。\n\n```console\n$ wget -m https://example.com/blog/\n--2025-05-05 10:30:12--  https://example.com/blog/\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 16384 (16K) [text/html]\nSaving to: 'example.com/blog/index.html'\n\nexample.com/blog/index.html    100%[===================>]  16.00K  --.-KB/s    in 0.1s    \n\n2025-05-05 10:30:13 (160.0 KB/s) - 'example.com/blog/index.html' saved [16384/16384]\n\n... [more files downloaded] ...\n```\n\n### **-q, --quiet**\n\n静かモード（出力なし）。\n\n```console\n$ wget -q https://example.com/file.txt\n```\n\n### **-P, --directory-prefix=PREFIX**\n\nファイルをPREFIX/...に保存します。\n\n```console\n$ wget -P downloads/ https://example.com/file.txt\n--2025-05-05 10:35:22--  https://example.com/file.txt\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1024 (1.0K) [text/plain]\nSaving to: 'downloads/file.txt'\n\ndownloads/file.txt   100%[===================>]   1.00K  --.-KB/s    in 0.1s    \n\n2025-05-05 10:35:23 (10.0 KB/s) - 'downloads/file.txt' saved [1024/1024]\n```\n\n### **--limit-rate=RATE**\n\nダウンロードレートをRATEに制限します（例：200kは200KB/s）。\n\n```console\n$ wget --limit-rate=200k https://example.com/large-file.zip\n--2025-05-05 10:40:15--  https://example.com/large-file.zip\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 104857600 (100M) [application/zip]\nSaving to: 'large-file.zip'\n\nlarge-file.zip      100%[===================>] 100.00M  200KB/s    in 8m 20s  \n\n2025-05-05 10:48:35 (200 KB/s) - 'large-file.zip' saved [104857600/104857600]\n```\n\n## 使用例\n\n### プログレスバー付きでファイルをダウンロードする\n\n```console\n$ wget https://example.com/file.txt\n--2025-05-05 10:50:12--  https://example.com/file.txt\nResolving example.com... 93.184.216.34\nConnecting to example.com|93.184.216.34|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1024 (1.0K) [text/plain]\nSaving to: 'file.txt'\n\nfile.txt             100%[===================>]   1.00K  --.-KB/s    in 0.1s    \n\n2025-05-05 10:50:13 (10.0 KB/s) - 'file.txt' saved [1024/1024]\n```\n\n### 深さ制限付きでウェブサイトをミラーリングする\n\n```console\n$ wget -m -k -p -l 2 https://example.com/\n```\n\nこのコマンドはウェブサイトをミラーリングし、オフライン表示用にリンクを変換し（-k）、必要なページ要素をダウンロードし（-p）、再帰の深さを2レベルに制限します（-l 2）。\n\n### パスワード保護されたサイトからファイルをダウンロードする\n\n```console\n$ wget --user=username --password=password https://example.com/protected/file.pdf\n```\n\n### テキストファイルに記載された複数のファイルをダウンロードする\n\n```console\n$ cat urls.txt\nhttps://example.com/file1.txt\nhttps://example.com/file2.txt\nhttps://example.com/file3.txt\n\n$ wget -i urls.txt\n```\n\n## ヒント:\n\n### 中断されたダウンロードを再開する\n\nダウンロードが中断された場合、最初からやり直す代わりに `wget -c URL` を使用して中断された箇所から再開できます。\n\n### バックグラウンドでダウンロードする\n\n大きなダウンロードの場合、`wget -b URL` を使用してwgetをバックグラウンドで実行できます。出力は現在のディレクトリのwget-logに書き込まれます。\n\n### 帯域幅使用量を制限する\n\n`--limit-rate=RATE`（例：`--limit-rate=200k`）を使用して、利用可能な帯域幅をすべて消費しないようにします。特に共有接続で役立ちます。\n\n### オフライン表示用にウェブサイトをミラーリングする\n\n`wget -m -k -p website-url` を使用して、リンクが機能する完全なオフラインコピーを作成します。`-k` オプションはローカル表示用にリンクを変換します。\n\n### 異なるユーザーエージェントを使用する\n\n一部のウェブサイトはwgetをブロックします。`--user-agent=\"Mozilla/5.0\"` を使用して、ブラウザとして識別されるようにします。\n\n## よくある質問\n\n#### Q1. ファイルをダウンロードして別の名前で保存するにはどうすればよいですか？\nA. `wget -O ファイル名 URL` を使用して、ダウンロードしたファイルをカスタム名で保存します。\n\n#### Q2. パスワード保護されたサイトからファイルをダウンロードするにはどうすればよいですか？\nA. `wget --user=ユーザー名 --password=パスワード URL` を使用して認証情報を提供します。\n\n#### Q3. ウェブサイト全体をダウンロードするにはどうすればよいですか？\nA. `wget -m -k -p ウェブサイトURL` を使用して、オフライン表示用に適切にリンク変換されたサイトをミラーリングします。\n\n#### Q4. ダウンロード速度を制限するにはどうすればよいですか？\nA. `wget --limit-rate=RATE URL`（例：`--limit-rate=200k` で200KB/s）を使用します。\n\n#### Q5. 部分的にダウンロードされたファイルを再開するにはどうすればよいですか？\nA. `wget -c URL` を使用して、中断された箇所からダウンロードを続行します。\n\n## 参考文献\n\nhttps://www.gnu.org/software/wget/manual/wget.html\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 2619,
    "output_tokens": 3192
  }
}