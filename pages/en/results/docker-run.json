{
  "id": "msg_01L168ujsRTB6wva5WUauXCk",
  "content": [
    {
      "text": "# docker run command\n\nCreates and starts a new container from an image.\n\n## Overview\n\n`docker run` creates and runs a new container from a specified Docker image. It combines the functionality of `docker create` and `docker start` in a single command. This command is fundamental for launching containers with various configurations, network settings, volume mounts, and runtime parameters.\n\n## Options\n\n### **--name**\n\nAssign a name to the container\n\n```console\n$ docker run --name my-nginx nginx\n```\n\n### **-d, --detach**\n\nRun container in background and print container ID\n\n```console\n$ docker run -d nginx\n7cb5d2b9a7eab87f07182b5bf58936c9947890995b1b94f412912fa822a9ecb5\n```\n\n### **-p, --publish**\n\nPublish a container's port(s) to the host\n\n```console\n$ docker run -p 8080:80 nginx\n```\n\n### **-v, --volume**\n\nBind mount a volume\n\n```console\n$ docker run -v /host/path:/container/path nginx\n```\n\n### **-e, --env**\n\nSet environment variables\n\n```console\n$ docker run -e MYSQL_ROOT_PASSWORD=my-secret-pw mysql\n```\n\n### **--rm**\n\nAutomatically remove the container when it exits\n\n```console\n$ docker run --rm alpine echo \"Hello, World!\"\nHello, World!\n```\n\n### **-i, --interactive**\n\nKeep STDIN open even if not attached\n\n```console\n$ docker run -i ubuntu\n```\n\n### **-t, --tty**\n\nAllocate a pseudo-TTY\n\n```console\n$ docker run -it ubuntu bash\nroot@7cb5d2b9a7ea:/#\n```\n\n### **--network**\n\nConnect a container to a network\n\n```console\n$ docker run --network=my-network nginx\n```\n\n### **--restart**\n\nRestart policy to apply when a container exits\n\n```console\n$ docker run --restart=always nginx\n```\n\n## Usage Examples\n\n### Running a web server with port mapping\n\n```console\n$ docker run -d --name my-website -p 8080:80 nginx\n7cb5d2b9a7eab87f07182b5bf58936c9947890995b1b94f412912fa822a9ecb5\n```\n\n### Running an interactive shell in a container\n\n```console\n$ docker run -it --rm ubuntu bash\nroot@7cb5d2b9a7ea:/# ls\nbin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\nroot@7cb5d2b9a7ea:/# exit\n```\n\n### Running a container with environment variables and volume mounts\n\n```console\n$ docker run -d \\\n  --name my-database \\\n  -e POSTGRES_PASSWORD=mysecretpassword \\\n  -v pgdata:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:13\n```\n\n## Tips:\n\n### Use --rm for Temporary Containers\n\nWhen running containers for one-off tasks or testing, use the `--rm` flag to automatically clean up the container after it exits, preventing container clutter.\n\n### Combine -i and -t for Interactive Sessions\n\nThe `-it` combination is commonly used when you need an interactive terminal session with the container, such as running a shell.\n\n### Use Named Volumes for Persistent Data\n\nInstead of binding to host directories, consider using named volumes (`-v myvolume:/container/path`) for better portability and management of persistent data.\n\n### Limit Container Resources\n\nUse `--memory` and `--cpus` flags to limit the resources a container can use, preventing a single container from consuming all host resources.\n\n```console\n$ docker run --memory=512m --cpus=0.5 nginx\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `docker run` and `docker start`?\nA. `docker run` creates and starts a new container from an image, while `docker start` restarts a stopped container that already exists.\n\n#### Q2. How do I run a container in the background?\nA. Use the `-d` or `--detach` flag to run the container in the background.\n\n#### Q3. How can I access a service running in a container?\nA. Use the `-p` or `--publish` flag to map container ports to host ports, e.g., `-p 8080:80` maps container port 80 to host port 8080.\n\n#### Q4. How do I pass environment variables to a container?\nA. Use the `-e` or `--env` flag followed by the variable name and value, e.g., `-e VARIABLE=value`.\n\n#### Q5. How do I share files between my host and a container?\nA. Use the `-v` or `--volume` flag to mount host directories or volumes into the container, e.g., `-v /host/path:/container/path`.\n\n## References\n\nhttps://docs.docker.com/engine/reference/commandline/run/\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1693,
    "output_tokens": 1219
  }
}