{
  "id": "msg_01CfGWUk5UtNhHRVP8hqwm4f",
  "content": [
    {
      "text": "# strace command\n\nTrace system calls and signals for a process.\n\n## Overview\n\n`strace` is a diagnostic and debugging utility for Linux that traces the system calls and signals of a specified program. It intercepts and records the system calls made by a process and the signals received by it, making it an invaluable tool for troubleshooting, understanding program behavior, and diagnosing issues with applications.\n\n## Options\n\n### **-f**\n\nTrace child processes as they are created by currently traced processes.\n\n```console\n$ strace -f ./my_program\nexecve(\"./my_program\", [\"./my_program\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\nbrk(NULL)                               = 0x55a8a9899000\n[pid 12345] clone(child_stack=NULL, flags=CLONE_CHILD|SIGCHLD, ...) = 12346\n[pid 12346] execve(\"/bin/ls\", [\"ls\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\n```\n\n### **-p PID**\n\nAttach to the process with the specified PID and begin tracing.\n\n```console\n$ strace -p 1234\nstrace: Process 1234 attached\nread(3, \"Hello, world!\\n\", 4096)        = 14\nwrite(1, \"Hello, world!\\n\", 14)         = 14\n```\n\n### **-o FILENAME**\n\nWrite the trace output to a file instead of stderr.\n\n```console\n$ strace -o trace.log ls\n$ cat trace.log\nexecve(\"/bin/ls\", [\"ls\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\nbrk(NULL)                               = 0x55a8a9899000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\n```\n\n### **-e EXPR**\n\nA qualifying expression that modifies which events to trace or how to trace them.\n\n```console\n$ strace -e open,close ls\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nclose(3)                                = 0\nopen(\"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3\nclose(3)                                = 0\n```\n\n### **-c**\n\nCount time, calls, and errors for each system call and report a summary.\n\n```console\n$ strace -c ls\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 25.00    0.000125          21         6           mmap\n 20.00    0.000100          25         4           open\n 15.00    0.000075          25         3           read\n 10.00    0.000050          17         3           close\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000500                    45         5 total\n```\n\n### **-t**\n\nPrefix each line of the trace with the time of day.\n\n```console\n$ strace -t ls\n14:15:23 execve(\"/bin/ls\", [\"ls\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\n14:15:23 brk(NULL)                      = 0x55a8a9899000\n14:15:23 access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory)\n```\n\n## Usage Examples\n\n### Tracing a program from start to finish\n\n```console\n$ strace ls -l\nexecve(\"/bin/ls\", [\"ls\", \"-l\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\nbrk(NULL)                               = 0x55a8a9899000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopenat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\n...\n```\n\n### Tracing specific system calls\n\n```console\n$ strace -e trace=open,read,write ls\nopenat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\360\\23\\2\\0\\0\\0\\0\\0\"..., 832) = 832\nwrite(1, \"file1.txt  file2.txt  file3.txt\\n\", 32) = 32\n```\n\n### Attaching to a running process and saving output to a file\n\n```console\n$ strace -p 1234 -o process_trace.log\nstrace: Process 1234 attached\n^C\n$ cat process_trace.log\nread(4, \"data from socket\", 1024)       = 16\nwrite(1, \"data from socket\", 16)        = 16\n```\n\n## Tips:\n\n### Filter System Calls\n\nUse `-e trace=` to focus on specific system calls. For example, `-e trace=network` shows only network-related calls, making it easier to debug connection issues.\n\n### Understand Performance Issues\n\nUse `-c` to get a summary of time spent in each system call. This helps identify which system calls are taking the most time in your application.\n\n### Trace Child Processes\n\nAlways use `-f` when tracing programs that fork child processes. Without it, you'll only see the parent process activity.\n\n### Reduce Output Verbosity\n\nFor large files or buffers, use `-s` followed by a number to limit string output length. For example, `-s 100` limits strings to 100 characters.\n\n### Timestamp Your Traces\n\nAdd `-t` or `-tt` (for microsecond precision) to include timestamps in your trace, which helps correlate events with other logs.\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between strace and ltrace?\nA. `strace` traces system calls (interactions between programs and the kernel), while `ltrace` traces library calls (interactions between programs and libraries).\n\n#### Q2. How do I trace a program that requires root privileges?\nA. Run strace with sudo: `sudo strace command`. To attach to a running process owned by root, use `sudo strace -p PID`.\n\n#### Q3. Why is my program running much slower when traced with strace?\nA. Tracing adds significant overhead because it intercepts every system call. This is normal behavior and should be considered when interpreting timing results.\n\n#### Q4. How can I see only file-related operations?\nA. Use `strace -e trace=file command` to see only file-related system calls.\n\n#### Q5. Can strace trace multithreaded applications?\nA. Yes, use `strace -f` to follow threads (which are implemented as processes in Linux).\n\n## References\n\nhttps://man7.org/linux/man-pages/man1/strace.1.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1679,
    "output_tokens": 1798
  }
}