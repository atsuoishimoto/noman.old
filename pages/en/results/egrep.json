{
  "id": "msg_01TCDGMU9P9AKvCawDjFEAjq",
  "content": [
    {
      "text": "# egrep command\n\nSearch for patterns using extended regular expressions.\n\n## Overview\n\n`egrep` is a pattern-matching tool that searches for text patterns in files using extended regular expressions. It's functionally equivalent to `grep -E` and provides more powerful pattern matching capabilities than standard `grep`. The command prints lines that match the specified pattern.\n\n## Options\n\n### **-i, --ignore-case**\n\nIgnore case distinctions in patterns and input data\n\n```console\n$ egrep -i \"error\" logfile.txt\nError: Connection refused\nWARNING: error in line 42\nSystem error detected\n```\n\n### **-v, --invert-match**\n\nSelect non-matching lines\n\n```console\n$ egrep -v \"error\" logfile.txt\nConnection established successfully\nSystem started at 10:00 AM\nAll processes running normally\n```\n\n### **-c, --count**\n\nPrint only a count of matching lines per file\n\n```console\n$ egrep -c \"error\" logfile.txt\n3\n```\n\n### **-n, --line-number**\n\nPrefix each line of output with the line number within its input file\n\n```console\n$ egrep -n \"error\" logfile.txt\n5:error: file not found\n12:system error occurred\n27:error code: 404\n```\n\n### **-l, --files-with-matches**\n\nPrint only names of files containing matches\n\n```console\n$ egrep -l \"error\" *.log\napp.log\nsystem.log\nerror.log\n```\n\n### **-r, --recursive**\n\nRead all files under each directory, recursively\n\n```console\n$ egrep -r \"password\" /home/user/\n/home/user/config.txt:password=123456\n/home/user/notes/secret.txt:my password is qwerty\n```\n\n## Usage Examples\n\n### Basic Pattern Matching\n\n```console\n$ egrep \"apple|orange\" fruits.txt\napple\norange\nmixed apple juice\nfresh orange\n```\n\n### Using Character Classes\n\n```console\n$ egrep \"[0-9]+\" numbers.txt\n42\n123\n7890\n```\n\n### Using Quantifiers\n\n```console\n$ egrep \"a{2,}\" words.txt\naardvark\nbaaad\nshaaa\n```\n\n### Combining Multiple Options\n\n```console\n$ egrep -in \"error|warning\" --color=auto logfile.txt\n3:WARNING: disk space low\n7:error: connection timeout\n15:WARNING: memory usage high\n22:error: invalid input\n```\n\n## Tips:\n\n### Use Extended Regular Expressions\n\n`egrep` supports powerful regex features like `+`, `?`, `|`, `()`, and `{}` without escaping, making complex pattern matching easier.\n\n### Colorize Matches\n\nUse `--color=auto` to highlight matching text in color, making it easier to spot matches in large outputs.\n\n### Combine with Other Commands\n\nPipe the output of other commands to `egrep` to filter results:\n```console\n$ ps aux | egrep \"(firefox|chrome)\"\n```\n\n### Use Word Boundaries\n\nTo match whole words only, use word boundaries `\\b`:\n```console\n$ egrep \"\\berror\\b\" logfile.txt\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `grep` and `egrep`?\nA. `egrep` is equivalent to `grep -E`, which uses extended regular expressions. Extended regex supports additional metacharacters like `+`, `?`, and `|` without requiring backslashes.\n\n#### Q2. How do I search for multiple patterns?\nA. Use the pipe symbol (`|`) to search for alternative patterns: `egrep \"pattern1|pattern2\" file.txt`\n\n#### Q3. How can I search for a pattern in all files in a directory?\nA. Use the recursive option: `egrep -r \"pattern\" directory/`\n\n#### Q4. How do I exclude certain files from the search?\nA. Use `--exclude` or `--exclude-dir` options: `egrep -r \"pattern\" --exclude=\"*.log\" directory/`\n\n## References\n\nhttps://www.gnu.org/software/grep/manual/grep.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1634,
    "output_tokens": 997
  }
}