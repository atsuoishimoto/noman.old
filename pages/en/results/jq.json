{
  "id": "msg_01KKYtsSnxdQtvqcRveTih8x",
  "content": [
    {
      "text": "# jq command\n\nProcess and transform JSON data with a lightweight command-line processor.\n\n## Overview\n\n`jq` is a flexible command-line JSON processor that allows you to slice, filter, map, and transform structured data. It works like `sed` for JSON data - you can use it to extract specific fields, transform values, filter arrays, and format output, all from the command line or scripts.\n\n## Options\n\n### **-r, --raw-output**\n\nOutputs raw strings rather than JSON encoded strings (removes quotes).\n\n```console\n$ echo '{\"name\": \"John\"}' | jq -r '.name'\nJohn\n```\n\n### **-c, --compact-output**\n\nProduces compact output instead of pretty-printed.\n\n```console\n$ echo '{\"name\": \"John\", \"age\": 30}' | jq -c '.'\n{\"name\":\"John\",\"age\":30}\n```\n\n### **-s, --slurp**\n\nReads all inputs into an array and applies the filter to it.\n\n```console\n$ echo '{\"id\": 1}' > file1.json\n$ echo '{\"id\": 2}' > file2.json\n$ jq -s '.' file1.json file2.json\n[\n  {\n    \"id\": 1\n  },\n  {\n    \"id\": 2\n  }\n]\n```\n\n### **-f, --from-file FILENAME**\n\nReads filter from a file.\n\n```console\n$ echo '.name' > filter.jq\n$ echo '{\"name\": \"John\", \"age\": 30}' | jq -f filter.jq\n\"John\"\n```\n\n### **-n, --null-input**\n\nDoesn't read any input, and jq constructs its own.\n\n```console\n$ jq -n '{\"created_at\": now | todate}'\n{\n  \"created_at\": \"2025-05-05T00:00:00Z\"\n}\n```\n\n## Usage Examples\n\n### Extract a specific field\n\n```console\n$ echo '{\"user\": {\"name\": \"John\", \"age\": 30}}' | jq '.user.name'\n\"John\"\n```\n\n### Filter an array\n\n```console\n$ echo '{\"users\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Jane\", \"age\": 25}]}' | jq '.users[] | select(.age > 28)'\n{\n  \"name\": \"John\",\n  \"age\": 30\n}\n```\n\n### Transform data structure\n\n```console\n$ echo '{\"users\": [{\"name\": \"John\"}, {\"name\": \"Jane\"}]}' | jq '.users | map({username: .name})'\n[\n  {\n    \"username\": \"John\"\n  },\n  {\n    \"username\": \"Jane\"\n  }\n]\n```\n\n### Combine with curl to process API responses\n\n```console\n$ curl -s 'https://api.example.com/users' | jq '.[] | {id, name}'\n{\n  \"id\": 1,\n  \"name\": \"John Doe\"\n}\n{\n  \"id\": 2,\n  \"name\": \"Jane Smith\"\n}\n```\n\n## Tips\n\n### Use Pipes for Complex Transformations\n\nChain multiple filters with pipes to perform complex transformations step by step:\n\n```console\n$ echo '{\"users\": [{\"name\": \"John\", \"roles\": [\"admin\", \"user\"]}, {\"name\": \"Jane\", \"roles\": [\"user\"]}]}' | jq '.users[] | select(.roles | contains([\"admin\"])) | .name'\n\"John\"\n```\n\n### Create New JSON Objects\n\nUse object construction syntax to create new JSON structures:\n\n```console\n$ echo '{\"first\": \"John\", \"last\": \"Doe\"}' | jq '{full_name: \"\\(.first) \\(.last)\", username: .first | ascii_downcase}'\n{\n  \"full_name\": \"John Doe\",\n  \"username\": \"john\"\n}\n```\n\n### Use Built-in Functions\n\n`jq` has many built-in functions for string manipulation, array operations, and more:\n\n```console\n$ echo '[1, 2, 3, 4, 5]' | jq 'map(. * 2) | add'\n30\n```\n\n## Frequently Asked Questions\n\n#### Q1. How do I extract a specific field from JSON?\nA. Use the dot notation: `jq '.fieldname'` or for nested fields: `jq '.parent.child'`.\n\n#### Q2. How do I remove quotes from the output?\nA. Use the `-r` or `--raw-output` option: `jq -r '.field'`.\n\n#### Q3. How do I filter an array based on a condition?\nA. Use `select()`: `jq '.items[] | select(.price > 10)'`.\n\n#### Q4. How do I format dates in jq?\nA. Use the `strftime` function: `jq '.timestamp | fromdate | strftime(\"%Y-%m-%d\")'`.\n\n#### Q5. How do I iterate through an array?\nA. Use the array iterator: `jq '.items[]'` to process each element.\n\n## References\n\nhttps://stedolan.github.io/jq/manual/\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1633,
    "output_tokens": 1244
  }
}