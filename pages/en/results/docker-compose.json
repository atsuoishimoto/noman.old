{
  "id": "msg_012rUt2cwESddfgibw3SzjBi",
  "content": [
    {
      "text": "# docker-compose command\n\nDefine and run multi-container Docker applications.\n\n## Overview\n\nDocker Compose is a tool for defining and running multi-container Docker applications. With a YAML file, you configure your application's services, networks, and volumes, then create and start all services with a single command. It simplifies the process of managing complex applications that require multiple interconnected containers.\n\n## Options\n\n### **up**\n\nCreate and start containers defined in the compose file\n\n```console\n$ docker-compose up\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\nAttaching to myapp_db_1, myapp_redis_1, myapp_web_1\n```\n\n### **-d, --detach**\n\nRun containers in the background\n\n```console\n$ docker-compose up -d\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\n```\n\n### **down**\n\nStop and remove containers, networks, images, and volumes\n\n```console\n$ docker-compose down\nStopping myapp_web_1   ... done\nStopping myapp_redis_1 ... done\nStopping myapp_db_1    ... done\nRemoving myapp_web_1   ... done\nRemoving myapp_redis_1 ... done\nRemoving myapp_db_1    ... done\nRemoving network myapp_default\n```\n\n### **ps**\n\nList containers\n\n```console\n$ docker-compose ps\n     Name                    Command               State           Ports         \n--------------------------------------------------------------------------------\nmyapp_db_1      docker-entrypoint.sh mysqld      Up      3306/tcp, 33060/tcp\nmyapp_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              \nmyapp_web_1     docker-entrypoint.sh npm start   Up      0.0.0.0:3000->3000/tcp\n```\n\n### **logs**\n\nView output from containers\n\n```console\n$ docker-compose logs\nAttaching to myapp_web_1, myapp_redis_1, myapp_db_1\nweb_1    | > myapp@1.0.0 start\nweb_1    | > node server.js\nweb_1    | Server listening on port 3000\ndb_1     | 2023-05-05T12:34:56.789Z 0 [Note] mysqld: ready for connections.\n```\n\n### **-f, --follow**\n\nFollow log output (with logs command)\n\n```console\n$ docker-compose logs -f\nAttaching to myapp_web_1, myapp_redis_1, myapp_db_1\nweb_1    | > myapp@1.0.0 start\nweb_1    | > node server.js\nweb_1    | Server listening on port 3000\n```\n\n### **build**\n\nBuild or rebuild services\n\n```console\n$ docker-compose build\nBuilding web\nStep 1/10 : FROM node:14\n ---> 1234567890ab\nStep 2/10 : WORKDIR /app\n ---> Using cache\n ---> abcdef123456\n...\nSuccessfully built 0123456789ab\nSuccessfully tagged myapp_web:latest\n```\n\n### **exec**\n\nExecute a command in a running container\n\n```console\n$ docker-compose exec web npm test\n> myapp@1.0.0 test\n> jest\n\nPASS  ./app.test.js\n  âœ“ should return 200 (32ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\n```\n\n### **-f, --file**\n\nSpecify an alternate compose file\n\n```console\n$ docker-compose -f docker-compose.prod.yml up -d\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\n```\n\n## Usage Examples\n\n### Starting a development environment\n\n```console\n$ docker-compose up\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\nAttaching to myapp_db_1, myapp_redis_1, myapp_web_1\n```\n\n### Rebuilding and starting services\n\n```console\n$ docker-compose up --build\nBuilding web\nStep 1/10 : FROM node:14\n...\nSuccessfully built 0123456789ab\nSuccessfully tagged myapp_web:latest\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\n```\n\n### Running a one-off command in a service container\n\n```console\n$ docker-compose run web npm install express\nCreating myapp_web_run ... done\n+ express@4.18.2\nadded 57 packages in 2.5s\n```\n\n### Scaling a service\n\n```console\n$ docker-compose up -d --scale web=3\nCreating myapp_web_1 ... done\nCreating myapp_web_2 ... done\nCreating myapp_web_3 ... done\n```\n\n## Tips:\n\n### Use Environment Variables\n\nStore sensitive information like passwords and API keys in a `.env` file instead of hardcoding them in your compose file.\n\n```console\n$ cat .env\nDB_PASSWORD=secretpassword\nAPI_KEY=1234567890abcdef\n```\n\n### Override Default Compose File\n\nCreate a `docker-compose.override.yml` file for development-specific settings that will automatically be used alongside the base `docker-compose.yml` file.\n\n### Use Named Volumes for Persistence\n\nNamed volumes preserve data between container restarts and rebuilds:\n\n```yaml\nvolumes:\n  db_data:\n\nservices:\n  db:\n    image: postgres\n    volumes:\n      - db_data:/var/lib/postgresql/data\n```\n\n### Use Version Control for Compose Files\n\nKeep your compose files in version control to track changes and collaborate with team members.\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `docker-compose up` and `docker-compose run`?\nA. `up` starts all services defined in the compose file, while `run` starts a specific service and runs a one-off command.\n\n#### Q2. How do I update a single service?\nA. Use `docker-compose up --build <service_name>` to rebuild and update a specific service.\n\n#### Q3. How can I view logs for a specific service?\nA. Use `docker-compose logs <service_name>` to view logs for a specific service.\n\n#### Q4. How do I stop services without removing containers?\nA. Use `docker-compose stop` to stop services without removing containers, networks, or volumes.\n\n#### Q5. How can I run docker-compose in production?\nA. While docker-compose can be used in production, Docker Swarm or Kubernetes are often better choices for production deployments. If using compose, create a production-specific compose file with appropriate settings.\n\n## References\n\nhttps://docs.docker.com/compose/reference/\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1634,
    "output_tokens": 1754
  }
}