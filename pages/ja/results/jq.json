{
  "id": "msg_01Le3YqTWoULEoFApQwFr1cT",
  "content": [
    {
      "text": "# jqコマンド\n\n軽量なコマンドラインプロセッサでJSONデータを処理・変換します。\n\n## 概要\n\n`jq`は柔軟なコマンドラインJSONプロセッサで、構造化データの切り出し、フィルタリング、マッピング、変換が可能です。JSONデータに対する`sed`のように機能し、特定のフィールドの抽出、値の変換、配列のフィルタリング、出力のフォーマットなどをコマンドラインやスクリプトから実行できます。\n\n## オプション\n\n### **-r, --raw-output**\n\nJSON形式でエンコードされた文字列ではなく、生の文字列を出力します（引用符を削除）。\n\n```console\n$ echo '{\"name\": \"John\"}' | jq -r '.name'\nJohn\n```\n\n### **-c, --compact-output**\n\n整形された出力ではなく、コンパクトな出力を生成します。\n\n```console\n$ echo '{\"name\": \"John\", \"age\": 30}' | jq -c '.'\n{\"name\":\"John\",\"age\":30}\n```\n\n### **-s, --slurp**\n\nすべての入力を配列として読み込み、フィルタを適用します。\n\n```console\n$ echo '{\"id\": 1}' > file1.json\n$ echo '{\"id\": 2}' > file2.json\n$ jq -s '.' file1.json file2.json\n[\n  {\n    \"id\": 1\n  },\n  {\n    \"id\": 2\n  }\n]\n```\n\n### **-f, --from-file FILENAME**\n\nファイルからフィルタを読み込みます。\n\n```console\n$ echo '.name' > filter.jq\n$ echo '{\"name\": \"John\", \"age\": 30}' | jq -f filter.jq\n\"John\"\n```\n\n### **-n, --null-input**\n\n入力を読み込まず、jqが独自に構築します。\n\n```console\n$ jq -n '{\"created_at\": now | todate}'\n{\n  \"created_at\": \"2025-05-05T00:00:00Z\"\n}\n```\n\n## 使用例\n\n### 特定のフィールドを抽出する\n\n```console\n$ echo '{\"user\": {\"name\": \"John\", \"age\": 30}}' | jq '.user.name'\n\"John\"\n```\n\n### 配列をフィルタリングする\n\n```console\n$ echo '{\"users\": [{\"name\": \"John\", \"age\": 30}, {\"name\": \"Jane\", \"age\": 25}]}' | jq '.users[] | select(.age > 28)'\n{\n  \"name\": \"John\",\n  \"age\": 30\n}\n```\n\n### データ構造を変換する\n\n```console\n$ echo '{\"users\": [{\"name\": \"John\"}, {\"name\": \"Jane\"}]}' | jq '.users | map({username: .name})'\n[\n  {\n    \"username\": \"John\"\n  },\n  {\n    \"username\": \"Jane\"\n  }\n]\n```\n\n### curlと組み合わせてAPIレスポンスを処理する\n\n```console\n$ curl -s 'https://api.example.com/users' | jq '.[] | {id, name}'\n{\n  \"id\": 1,\n  \"name\": \"John Doe\"\n}\n{\n  \"id\": 2,\n  \"name\": \"Jane Smith\"\n}\n```\n\n## ヒント\n\n### 複雑な変換にパイプを使用する\n\n複数のフィルタをパイプでつなげて、複雑な変換を段階的に実行できます：\n\n```console\n$ echo '{\"users\": [{\"name\": \"John\", \"roles\": [\"admin\", \"user\"]}, {\"name\": \"Jane\", \"roles\": [\"user\"]}]}' | jq '.users[] | select(.roles | contains([\"admin\"])) | .name'\n\"John\"\n```\n\n### 新しいJSONオブジェクトを作成する\n\nオブジェクト構築構文を使用して、新しいJSON構造を作成できます：\n\n```console\n$ echo '{\"first\": \"John\", \"last\": \"Doe\"}' | jq '{full_name: \"\\(.first) \\(.last)\", username: .first | ascii_downcase}'\n{\n  \"full_name\": \"John Doe\",\n  \"username\": \"john\"\n}\n```\n\n### 組み込み関数を使用する\n\n`jq`には文字列操作、配列操作などのための多くの組み込み関数があります：\n\n```console\n$ echo '[1, 2, 3, 4, 5]' | jq 'map(. * 2) | add'\n30\n```\n\n## よくある質問\n\n#### Q1. JSONから特定のフィールドを抽出するにはどうすればよいですか？\nA. ドット表記を使用します：`jq '.fieldname'`、またはネストしたフィールドの場合：`jq '.parent.child'`。\n\n#### Q2. 出力から引用符を削除するにはどうすればよいですか？\nA. `-r`または`--raw-output`オプションを使用します：`jq -r '.field'`。\n\n#### Q3. 条件に基づいて配列をフィルタリングするにはどうすればよいですか？\nA. `select()`を使用します：`jq '.items[] | select(.price > 10)'`。\n\n#### Q4. jqで日付をフォーマットするにはどうすればよいですか？\nA. `strftime`関数を使用します：`jq '.timestamp | fromdate | strftime(\"%Y-%m-%d\")'`。\n\n#### Q5. 配列を反復処理するにはどうすればよいですか？\nA. 配列イテレータを使用します：`jq '.items[]'`で各要素を処理します。\n\n## 参考文献\n\nhttps://stedolan.github.io/jq/manual/\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1374,
    "output_tokens": 1616
  }
}