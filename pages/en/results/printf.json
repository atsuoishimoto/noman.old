{
  "id": "msg_01VEEa32md8XKiDPZXJiND5D",
  "content": [
    {
      "text": "# printf command\n\nFormat and print data according to a specified format string.\n\n## Overview\n\nThe `printf` command formats and prints data to standard output according to a format specification. It works similarly to the C programming language's printf function, allowing precise control over output formatting including text alignment, number formatting, and string manipulation.\n\n## Options\n\n### **-v VAR**\n\nAssign the output to shell variable VAR rather than displaying it on standard output.\n\n```console\n$ printf -v myvar \"Hello, %s\" \"World\"\n$ echo $myvar\nHello, World\n```\n\n### **--help**\n\nDisplay a help message and exit.\n\n```console\n$ printf --help\nUsage: printf FORMAT [ARGUMENT]...\n   or: printf OPTION\nPrint ARGUMENT(s) according to FORMAT, or execute according to OPTION:\n\n      --help     display this help and exit\n      --version  output version information and exit\n...\n```\n\n### **--version**\n\nOutput version information and exit.\n\n```console\n$ printf --version\nprintf (GNU coreutils) 8.32\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nWritten by David MacKenzie.\n```\n\n## Format Specifiers\n\n### **%s** - String\n\n```console\n$ printf \"Hello, %s!\\n\" \"World\"\nHello, World!\n```\n\n### **%d** - Decimal integer\n\n```console\n$ printf \"Number: %d\\n\" 42\nNumber: 42\n```\n\n### **%f** - Floating-point number\n\n```console\n$ printf \"Pi is approximately %.2f\\n\" 3.14159\nPi is approximately 3.14\n```\n\n### **%c** - Character\n\n```console\n$ printf \"First letter: %c\\n\" \"A\"\nFirst letter: A\n```\n\n### **%x** - Hexadecimal\n\n```console\n$ printf \"Hex: %x\\n\" 255\nHex: ff\n```\n\n### **%%** - Literal percent sign\n\n```console\n$ printf \"100%% complete\\n\"\n100% complete\n```\n\n## Usage Examples\n\n### Basic text formatting\n\n```console\n$ printf \"Name: %s, Age: %d\\n\" \"Alice\" 30\nName: Alice, Age: 30\n```\n\n### Multiple arguments\n\n```console\n$ printf \"%s %s %s\\n\" \"one\" \"two\" \"three\"\none two three\n```\n\n### Width and alignment\n\n```console\n$ printf \"|%-10s|%10s|\\n\" \"left\" \"right\"\n|left      |     right|\n```\n\n### Precision for floating-point numbers\n\n```console\n$ printf \"%.2f %.4f %.0f\\n\" 3.14159 2.71828 5.999\n3.14 2.7183 6\n```\n\n### Formatting a table\n\n```console\n$ printf \"%-10s %-8s %s\\n\" \"Name\" \"Age\" \"City\"\n$ printf \"%-10s %-8d %s\\n\" \"Alice\" 30 \"New York\"\n$ printf \"%-10s %-8d %s\\n\" \"Bob\" 25 \"Chicago\"\nName       Age      City\nAlice      30       New York\nBob        25       Chicago\n```\n\n## Tips\n\n### Use Escape Sequences\n\nCommon escape sequences include `\\n` (newline), `\\t` (tab), and `\\\\` (backslash).\n\n```console\n$ printf \"Line 1\\nLine 2\\tTabbed\\n\"\nLine 1\nLine 2\tTabbed\n```\n\n### Format Numbers with Leading Zeros\n\nUse the format `%0Nd` where N is the total width:\n\n```console\n$ printf \"ID: %04d\\n\" 42\nID: 0042\n```\n\n### Reuse Format Arguments\n\nIf you provide more output positions than arguments, the last arguments will be reused:\n\n```console\n$ printf \"A: %d, B: %d, C: %d\\n\" 1 2\nA: 1, B: 2, C: 2\n```\n\n### Print Without Newline\n\nUnlike `echo`, `printf` doesn't automatically add a newline:\n\n```console\n$ printf \"No newline\"\nNo newline$\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `printf` and `echo`?\nA. `printf` offers more precise formatting control but doesn't add a newline by default. `echo` is simpler but has fewer formatting options and automatically adds a newline.\n\n#### Q2. How do I format a date with `printf`?\nA. You can't directly format dates with `printf`. Use the `date` command to generate a formatted date string, then pass it to `printf`:\n```console\n$ printf \"Today is %s\\n\" \"$(date +\"%Y-%m-%d\")\"\nToday is 2025-05-05\n```\n\n#### Q3. How do I print special characters like tabs or newlines?\nA. Use escape sequences: `\\t` for tab, `\\n` for newline, `\\r` for carriage return, and `\\\\` for a literal backslash.\n\n#### Q4. How do I format decimal places in numbers?\nA. Use the precision specifier, like `%.2f` for 2 decimal places:\n```console\n$ printf \"Price: $%.2f\\n\" 9.99\nPrice: $9.99\n```\n\n## References\n\nhttps://www.gnu.org/software/coreutils/manual/html_node/printf-invocation.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1678,
    "output_tokens": 1374
  }
}