{
  "id": "msg_01FbfUtkpjGFKofxN6oyikQ6",
  "content": [
    {
      "text": "# git commit command\n\nRecord changes to the repository by saving staged content as a new commit.\n\n## Overview\n\nThe `git commit` command captures a snapshot of the project's currently staged changes. Committed snapshots are \"safe\" versions of a project that Git will never change unless explicitly asked to do so. Before running `git commit`, you need to use `git add` to stage the changes you want to include in the commit.\n\n## Options\n\n### **-m, --message=<msg>**\n\nUse the given message as the commit message instead of launching an editor.\n\n```console\n$ git commit -m \"Add new feature\"\n[main 5d6e7f8] Add new feature\n 1 file changed, 10 insertions(+), 2 deletions(-)\n```\n\n### **-a, --all**\n\nAutomatically stage all modified and deleted files before committing (does not include untracked files).\n\n```console\n$ git commit -a -m \"Update existing files\"\n[main 1a2b3c4] Update existing files\n 2 files changed, 15 insertions(+), 5 deletions(-)\n```\n\n### **--amend**\n\nReplace the tip of the current branch by creating a new commit, using the same log message as the previous commit.\n\n```console\n$ git commit --amend -m \"Fix previous commit message\"\n[main 7f8e9d6] Fix previous commit message\n Date: Mon May 5 10:30:45 2025 -0700\n 1 file changed, 10 insertions(+), 2 deletions(-)\n```\n\n### **-v, --verbose**\n\nShow diff of changes to be committed in the commit message editor.\n\n```console\n$ git commit -v\n# Opens editor with diff included in the commit template\n```\n\n### **--no-verify**\n\nBypass the pre-commit and commit-msg hooks.\n\n```console\n$ git commit --no-verify -m \"Emergency fix\"\n[main 3e4f5d6] Emergency fix\n 1 file changed, 3 insertions(+)\n```\n\n## Usage Examples\n\n### Creating a standard commit\n\n```console\n$ git add file1.txt file2.txt\n$ git commit -m \"Add new files and update documentation\"\n[main 1a2b3c4] Add new files and update documentation\n 2 files changed, 25 insertions(+), 0 deletions(-)\n create mode 100644 file1.txt\n create mode 100644 file2.txt\n```\n\n### Amending the previous commit with new changes\n\n```console\n$ git add forgotten_file.txt\n$ git commit --amend\n[main 1a2b3c4] Add new files and update documentation\n 3 files changed, 30 insertions(+), 0 deletions(-)\n create mode 100644 file1.txt\n create mode 100644 file2.txt\n create mode 100644 forgotten_file.txt\n```\n\n### Creating an empty commit\n\n```console\n$ git commit --allow-empty -m \"Trigger CI build\"\n[main 9d8c7b6] Trigger CI build\n```\n\n## Tips:\n\n### Write Meaningful Commit Messages\n\nGood commit messages should explain why a change was made, not just what was changed. Use the present tense (\"Add feature\" not \"Added feature\") and keep the first line under 50 characters, followed by a blank line and more detailed explanation if needed.\n\n### Use Atomic Commits\n\nMake each commit a logical unit of work that focuses on a single change. This makes it easier to understand, review, and potentially revert changes later.\n\n### Verify What You're Committing\n\nBefore committing, use `git status` to verify what files are staged and `git diff --staged` to review the exact changes that will be committed.\n\n### Sign Your Commits\n\nFor security-sensitive projects, consider using `git commit -S` to cryptographically sign your commits, verifying that you are the author.\n\n## Frequently Asked Questions\n\n#### Q1. How do I undo my last commit?\nA. Use `git reset HEAD~1` to undo the commit but keep the changes staged, or `git reset --hard HEAD~1` to discard the changes completely.\n\n#### Q2. How can I change my commit message after pushing?\nA. Use `git commit --amend` to change the message, then `git push --force` to update the remote (use with caution on shared branches).\n\n#### Q3. What's the difference between `git commit` and `git commit -a`?\nA. `git commit` only commits changes that have been staged with `git add`, while `git commit -a` automatically stages and commits all modified and deleted tracked files.\n\n#### Q4. Can I commit only part of a file's changes?\nA. Yes, use `git add -p` to interactively select which changes to stage before committing.\n\n## References\n\nhttps://git-scm.com/docs/git-commit\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1680,
    "output_tokens": 1174
  }
}