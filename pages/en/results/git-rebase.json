{
  "id": "msg_01EQvPeJWWyBPqqgtvGB8QYu",
  "content": [
    {
      "text": "# git-rebase command\n\nReapply commits on top of another base tip, rewriting the commit history.\n\n## Overview\n\n`git rebase` is used to change the base of your branch from one commit to another, making it appear as if you created your branch from a different commit. It rewrites the commit history by creating new commits for each commit in the original branch, potentially resulting in a cleaner, linear project history.\n\n## Options\n\n### **-i, --interactive**\n\nStart an interactive rebase session, allowing you to edit, squash, reorder, or drop commits.\n\n```console\n$ git rebase -i HEAD~3\n# Opens editor with the last 3 commits listed for modification\n```\n\n### **--onto <newbase>**\n\nSpecify the new base commit to reapply your changes onto.\n\n```console\n$ git rebase --onto main feature-branch\n# Reapplies commits from current branch onto main, starting from feature-branch\n```\n\n### **--continue**\n\nContinue the rebase operation after resolving conflicts.\n\n```console\n$ git rebase --continue\n# Continues the rebase after fixing conflicts\n```\n\n### **--abort**\n\nCancel the rebase operation and return to the pre-rebase state.\n\n```console\n$ git rebase --abort\n# Cancels the rebase and restores the original state\n```\n\n### **--skip**\n\nSkip the current patch and continue with the next one.\n\n```console\n$ git rebase --skip\n# Skips the current commit and continues with the next one\n```\n\n### **-m, --merge**\n\nUse merging strategies to rebase.\n\n```console\n$ git rebase -m main\n# Uses merge strategy when rebasing onto main\n```\n\n### **-s, --strategy=<strategy>**\n\nUse the given merge strategy.\n\n```console\n$ git rebase -s recursive main\n# Uses recursive strategy when rebasing onto main\n```\n\n## Usage Examples\n\n### Basic Rebasing\n\n```console\n$ git checkout feature\n$ git rebase main\n# Reapplies commits from feature branch onto the tip of main\n```\n\n### Interactive Rebasing to Squash Commits\n\n```console\n$ git rebase -i HEAD~5\n# In the editor that opens:\n# pick 01ab234 First commit message\n# squash 56cd789 Second commit message\n# squash 89ef012 Third commit message\n# pick 34gh567 Fourth commit message\n# pick 78ij890 Fifth commit message\n```\n\n### Moving a Branch to a Different Base\n\n```console\n$ git rebase --onto main feature-base feature\n# Reapplies commits from feature-base to feature onto main\n```\n\n## Tips:\n\n### Never Rebase Public Branches\n\nAvoid rebasing commits that have been pushed to public repositories. Rebasing changes commit history, which can cause conflicts for others who have based work on those commits.\n\n### Resolve Conflicts Carefully\n\nWhen conflicts occur during rebase, Git pauses the operation. Resolve conflicts in each file, then use `git add` to mark them as resolved before continuing with `git rebase --continue`.\n\n### Create a Backup Branch\n\nBefore performing a complex rebase, create a backup branch: `git branch backup-branch`. This provides a safety net if the rebase goes wrong.\n\n### Use Interactive Rebase for Cleanup\n\nInteractive rebase (`-i`) is excellent for cleaning up your commit history before sharing your work. You can combine related commits, remove unnecessary ones, and rewrite commit messages.\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between merge and rebase?\nA. Merge preserves history and creates a merge commit, while rebase rewrites history by creating new commits, resulting in a linear history.\n\n#### Q2. How do I undo a rebase?\nA. If you haven't pushed the changes, use `git reflog` to find the commit before the rebase and then `git reset --hard <commit-hash>` to return to that state.\n\n#### Q3. When should I use rebase instead of merge?\nA. Use rebase for cleaning up your local, unpublished commits or maintaining a linear history. Use merge for integrating public branches.\n\n#### Q4. How do I resolve conflicts during a rebase?\nA. Edit the conflicted files to resolve the conflicts, then `git add` the resolved files and run `git rebase --continue`.\n\n#### Q5. Can I rebase multiple branches at once?\nA. No, you must rebase one branch at a time.\n\n## References\n\nhttps://git-scm.com/docs/git-rebase\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1681,
    "output_tokens": 1061
  }
}