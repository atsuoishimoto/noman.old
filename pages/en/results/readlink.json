{
  "id": "msg_011o58izvyMjXPXq4BtSCtUp",
  "content": [
    {
      "text": "# readlink command\n\nPrint the resolved symbolic links or canonical file names.\n\n## Overview\n\nThe `readlink` command displays the target of a symbolic link or the canonical path of a file. It resolves symbolic links and returns the actual destination path. This is useful for scripts that need to determine where a symbolic link points to or to get the absolute path of a file.\n\n## Options\n\n### **-f, --canonicalize**\n\nCanonicalize by following every symlink in every component of the given name recursively; all but the last component must exist\n\n```console\n$ ln -s /etc/hosts mylink\n$ readlink -f mylink\n/etc/hosts\n```\n\n### **-e, --canonicalize-existing**\n\nCanonicalize by following every symlink in every component of the given name recursively, all components must exist\n\n```console\n$ readlink -e mylink\n/etc/hosts\n```\n\n### **-m, --canonicalize-missing**\n\nCanonicalize by following every symlink in every component of the given name recursively, without requirements on components existence\n\n```console\n$ readlink -m /nonexistent/path\n/nonexistent/path\n```\n\n### **-n, --no-newline**\n\nDo not output the trailing delimiter (newline)\n\n```console\n$ readlink -n mylink && echo \" (this is the target)\"\n/etc/hosts (this is the target)\n```\n\n### **-z, --zero**\n\nEnd each output line with NUL, not newline\n\n```console\n$ readlink -z mylink | hexdump -C\n00000000  2f 65 74 63 2f 68 6f 73  74 73 00                 |/etc/hosts.|\n0000000b\n```\n\n### **-v, --verbose**\n\nReport errors\n\n```console\n$ readlink -v nonexistent\nreadlink: nonexistent: No such file or directory\n```\n\n## Usage Examples\n\n### Basic usage to read a symbolic link\n\n```console\n$ ln -s /usr/bin bin_link\n$ readlink bin_link\n/usr/bin\n```\n\n### Getting the absolute path of a file\n\n```console\n$ readlink -f ../relative/path/to/file.txt\n/absolute/path/to/file.txt\n```\n\n### Using readlink in a script\n\n```console\n$ SCRIPT_PATH=$(readlink -f \"$0\")\n$ SCRIPT_DIR=$(dirname \"$SCRIPT_PATH\")\n$ echo \"This script is located in: $SCRIPT_DIR\"\nThis script is located in: /home/user/scripts\n```\n\n## Tips:\n\n### Difference Between -f, -e, and -m\n\n- `-f` follows all symlinks but requires only the final component to exist\n- `-e` follows all symlinks but requires all components to exist\n- `-m` follows all symlinks with no existence requirements (useful for nonexistent paths)\n\n### Use in Shell Scripts\n\nWhen writing shell scripts, use `readlink -f \"$0\"` to get the absolute path of the script itself, regardless of where it's called from.\n\n### Handling Spaces in Filenames\n\nAlways quote variables when using readlink to handle filenames with spaces:\n\n```console\n$ readlink -f \"$my_file\"  # Correct\n$ readlink -f $my_file    # Incorrect with spaces\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `readlink` and `realpath`?\nA. Both commands resolve symbolic links, but `realpath` always provides the absolute path, while `readlink` without options simply shows the target of a symlink. With `-f`, `readlink` behaves similarly to `realpath`.\n\n#### Q2. How do I get the directory containing a script?\nA. Use `dirname \"$(readlink -f \"$0\")\"` to get the directory containing the script, regardless of where it's called from.\n\n#### Q3. Why does `readlink` without options fail on regular files?\nA. Without options, `readlink` only works on symbolic links. Use `-f` to make it work on regular files too.\n\n#### Q4. How can I use `readlink` to check if a file is a symbolic link?\nA. If `readlink` without options returns output, the file is a symlink. If it returns an error, it's not a symlink.\n\n## References\n\nhttps://www.gnu.org/software/coreutils/manual/html_node/readlink-invocation.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1691,
    "output_tokens": 1047
  }
}