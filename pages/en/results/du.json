{
  "id": "msg_01HJVwdTTKiNAtTiVWxCuka6",
  "content": [
    {
      "text": "# du command\n\nEstimate file space usage for directories and files.\n\n## Overview\n\nThe `du` (disk usage) command estimates and displays the disk space used by files and directories. It's particularly useful for finding which directories are consuming the most space on your system, helping you identify areas for cleanup.\n\n## Options\n\n### **-h, --human-readable**\n\nDisplay sizes in human-readable format (e.g., 1K, 234M, 2G)\n\n```console\n$ du -h Documents\n4.0K    Documents/notes\n16K     Documents/projects/code\n24K     Documents/projects\n28K     Documents\n```\n\n### **-s, --summarize**\n\nDisplay only a total for each argument\n\n```console\n$ du -s Documents\n28      Documents\n```\n\n### **-c, --total**\n\nProduce a grand total of all arguments\n\n```console\n$ du -c Documents Downloads\n28      Documents\n156     Downloads\n184     total\n```\n\n### **-a, --all**\n\nShow sizes for files as well as directories\n\n```console\n$ du -a Documents\n4       Documents/notes/todo.txt\n4       Documents/notes\n8       Documents/projects/code/script.py\n16      Documents/projects/code\n24      Documents/projects\n28      Documents\n```\n\n### **--max-depth=N**\n\nPrint the total for a directory only if it is N or fewer levels below the command line argument\n\n```console\n$ du --max-depth=1 Documents\n4       Documents/notes\n24      Documents/projects\n28      Documents\n```\n\n### **-x, --one-file-system**\n\nSkip directories on different file systems\n\n```console\n$ du -x /home\n```\n\n## Usage Examples\n\n### Finding the largest directories\n\n```console\n$ du -h --max-depth=1 /home/user | sort -hr\n1.2G    /home/user\n650M    /home/user/Downloads\n320M    /home/user/Videos\n200M    /home/user/Documents\n45M     /home/user/.cache\n```\n\n### Checking specific directory size with human-readable output\n\n```console\n$ du -sh /var/log\n156M    /var/log\n```\n\n### Finding large files in the current directory\n\n```console\n$ du -ah . | sort -hr | head -n 10\n1.2G    .\n650M    ./Downloads\n320M    ./Videos\n200M    ./Documents\n150M    ./Downloads/ubuntu.iso\n100M    ./Videos/lecture.mp4\n45M     ./.cache\n25M     ./Documents/thesis.pdf\n20M     ./Pictures\n15M     ./Music\n```\n\n## Tips:\n\n### Combine with sort for better insights\n\nPipe `du` output to `sort -hr` to list directories by size in descending order:\n```console\n$ du -h | sort -hr\n```\n\n### Use with find to target specific file types\n\nCombine with `find` to analyze space used by specific file types:\n```console\n$ find . -name \"*.log\" -exec du -ch {} \\; | grep total$\n```\n\n### Exclude certain directories\n\nUse with `grep -v` to exclude directories from analysis:\n```console\n$ du -h | grep -v \"node_modules\"\n```\n\n### On macOS\n\nThe BSD version of `du` on macOS has slightly different options. Use `brew install coreutils` and then `gdu` to get GNU-compatible behavior.\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `du` and `df`?\nA. `du` shows disk usage of files and directories, while `df` shows available and used disk space on mounted filesystems.\n\n#### Q2. Why does `du` report different sizes than what I see in a file manager?\nA. `du` measures disk space used (including filesystem overhead), while file managers often show logical file sizes.\n\n#### Q3. How can I exclude certain directories from the calculation?\nA. Use the `--exclude=PATTERN` option: `du --exclude=node_modules`.\n\n#### Q4. Why is `du` slow on large directories?\nA. `du` needs to traverse the entire directory structure to calculate sizes. For large directories, consider using `du -s` for summary only.\n\n## References\n\nhttps://www.gnu.org/software/coreutils/manual/html_node/du-invocation.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1678,
    "output_tokens": 1029
  }
}