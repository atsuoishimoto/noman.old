{
  "id": "msg_01Aa7ypyWVJrPQoXMLMWgsuc",
  "content": [
    {
      "text": "# [ command\n\nEvaluates conditional expressions and returns a status based on the evaluation.\n\n## Overview\n\nThe `[` command (also known as `test`) is a shell builtin that evaluates conditional expressions and returns a status of 0 (true) or 1 (false). It's commonly used in shell scripts for conditional testing of file attributes, string comparisons, and arithmetic operations. The command requires a closing `]` to complete its syntax.\n\n## Options\n\n### **-e file**\n\nTests if file exists.\n\n```console\n$ [ -e /etc/passwd ] && echo \"File exists\" || echo \"File does not exist\"\nFile exists\n```\n\n### **-f file**\n\nTests if file exists and is a regular file.\n\n```console\n$ [ -f /etc/passwd ] && echo \"Regular file\" || echo \"Not a regular file\"\nRegular file\n```\n\n### **-d file**\n\nTests if file exists and is a directory.\n\n```console\n$ [ -d /etc ] && echo \"Directory exists\" || echo \"Not a directory\"\nDirectory exists\n```\n\n### **-r file**\n\nTests if file exists and is readable.\n\n```console\n$ [ -r /etc/passwd ] && echo \"File is readable\" || echo \"File is not readable\"\nFile is readable\n```\n\n### **-w file**\n\nTests if file exists and is writable.\n\n```console\n$ [ -w /tmp ] && echo \"Directory is writable\" || echo \"Directory is not writable\"\nDirectory is writable\n```\n\n### **-x file**\n\nTests if file exists and is executable.\n\n```console\n$ [ -x /bin/ls ] && echo \"File is executable\" || echo \"File is not executable\"\nFile is executable\n```\n\n### **-z string**\n\nTests if the length of string is zero.\n\n```console\n$ [ -z \"\" ] && echo \"String is empty\" || echo \"String is not empty\"\nString is empty\n```\n\n### **-n string**\n\nTests if the length of string is non-zero.\n\n```console\n$ [ -n \"hello\" ] && echo \"String is not empty\" || echo \"String is empty\"\nString is not empty\n```\n\n## Usage Examples\n\n### String comparison\n\n```console\n$ name=\"John\"\n$ [ \"$name\" = \"John\" ] && echo \"Name is John\" || echo \"Name is not John\"\nName is John\n```\n\n### Numeric comparison\n\n```console\n$ age=25\n$ [ $age -eq 25 ] && echo \"Age is 25\" || echo \"Age is not 25\"\nAge is 25\n```\n\n### Combining conditions with logical operators\n\n```console\n$ [ -d /etc ] && [ -r /etc/passwd ] && echo \"Both conditions are true\"\nBoth conditions are true\n```\n\n### Using in if statements\n\n```console\n$ if [ -f /etc/hosts ]; then\n>   echo \"The hosts file exists\"\n> else\n>   echo \"The hosts file does not exist\"\n> fi\nThe hosts file exists\n```\n\n## Tips:\n\n### Always Quote Variables\n\nAlways quote variables inside `[` to prevent errors with empty variables or variables containing spaces:\n\n```console\n$ [ \"$variable\" = \"value\" ]  # Correct\n$ [ $variable = value ]      # Potentially problematic\n```\n\n### Use Double Brackets in Bash\n\nIn Bash, consider using `[[` instead of `[` for more advanced features and fewer quoting issues:\n\n```console\n$ [[ $string == *txt ]] && echo \"String ends with txt\"\n```\n\n### Remember the Closing Bracket\n\nThe `[` command requires a closing `]` as its last argument. Forgetting it will cause syntax errors.\n\n### Spacing is Critical\n\nSpaces are required around brackets and operators:\n\n```console\n$ [ -f file.txt ]    # Correct\n$ [-f file.txt]      # Incorrect\n$ [ $a = $b ]        # Correct\n$ [ $a=$b ]          # Incorrect\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `[` and `[[`?\nA. `[` is a command (also known as `test`) available in all POSIX shells, while `[[` is a Bash/Zsh shell keyword with extended functionality like pattern matching and logical operators without escaping.\n\n#### Q2. How do I check if a variable is empty?\nA. Use `[ -z \"$variable\" ]` to check if a variable is empty or `[ -n \"$variable\" ]` to check if it's not empty.\n\n#### Q3. How do I compare numbers?\nA. Use `-eq` (equal), `-ne` (not equal), `-lt` (less than), `-le` (less than or equal), `-gt` (greater than), or `-ge` (greater than or equal): `[ \"$num1\" -eq \"$num2\" ]`.\n\n#### Q4. How do I compare strings?\nA. Use `=` (equal) or `!=` (not equal): `[ \"$string1\" = \"$string2\" ]`.\n\n## References\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1695,
    "output_tokens": 1210
  }
}