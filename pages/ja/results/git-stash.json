{
  "id": "msg_01NaDACddWr6z832VGyHEqYn",
  "content": [
    {
      "text": "# git stash コマンド\n\n変更を一時的に保存し、コミットせずに変更を保存するためのコマンドです。\n\n## 概要\n\n`git stash`は、ローカルの変更を保存し、作業ディレクトリをHEADコミットと一致するように戻します。現在の作業をコミットする準備ができていないけれどブランチを切り替える必要がある場合や、未完成の作業をコミットせずに緊急の修正を適用する必要がある場合に便利です。\n\n## オプション\n\n### **stash**\n\nローカルの変更を新しいスタッシュエントリに保存し、HEADに戻します\n\n```console\n$ git stash\nSaved working directory and index state WIP on main: 2d4e15a Updated README\n```\n\n### **save [メッセージ]**\n\nカスタムメッセージを付けてローカルの変更を保存します\n\n```console\n$ git stash save \"機能Xの作業中\"\nSaved working directory and index state On main: 機能Xの作業中\n```\n\n### **list**\n\n保存したすべてのスタッシュを一覧表示します\n\n```console\n$ git stash list\nstash@{0}: WIP on main: 2d4e15a Updated README\nstash@{1}: On feature-branch: Implementing new login form\n```\n\n### **show [stash]**\n\nスタッシュに記録された変更を差分として表示します\n\n```console\n$ git stash show\n index.html | 2 +-\n style.css  | 5 +++++\n 2 files changed, 6 insertions(+), 1 deletion(-)\n```\n\n### **pop [stash]**\n\nスタッシュを適用し、スタッシュリストから削除します\n\n```console\n$ git stash pop\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   index.html\n        modified:   style.css\n\nDropped refs/stash@{0} (32b3aa1d185dfe6d57b3c3cc3e3f31b61a97ec2c)\n```\n\n### **apply [stash]**\n\nスタッシュをスタッシュリストから削除せずに適用します\n\n```console\n$ git stash apply\nOn branch main\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   index.html\n        modified:   style.css\n```\n\n### **drop [stash]**\n\nスタッシュリストからスタッシュを削除します\n\n```console\n$ git stash drop stash@{0}\nDropped stash@{0} (32b3aa1d185dfe6d57b3c3cc3e3f31b61a97ec2c)\n```\n\n### **clear**\n\nすべてのスタッシュエントリを削除します\n\n```console\n$ git stash clear\n```\n\n### **-u, --include-untracked**\n\n未追跡ファイルをスタッシュに含めます\n\n```console\n$ git stash -u\nSaved working directory and index state WIP on main: 2d4e15a Updated README\n```\n\n### **-a, --all**\n\n未追跡ファイルと無視されたファイルの両方をスタッシュに含めます\n\n```console\n$ git stash -a\nSaved working directory and index state WIP on main: 2d4e15a Updated README\n```\n\n## 使用例\n\n### 更新をプルする前に変更をスタッシュする\n\n```console\n$ git stash\nSaved working directory and index state WIP on main: 2d4e15a Updated README\n$ git pull\n$ git stash pop\n```\n\n### スタッシュからブランチを作成する\n\n```console\n$ git stash\nSaved working directory and index state WIP on main: 2d4e15a Updated README\n$ git stash branch new-feature stash@{0}\nSwitched to a new branch 'new-feature'\nOn branch new-feature\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   index.html\n        modified:   style.css\nDropped refs/stash@{0} (32b3aa1d185dfe6d57b3c3cc3e3f31b61a97ec2c)\n```\n\n### 特定のファイルをスタッシュする\n\n```console\n$ git stash push -m \"CSSファイルのみをスタッシュ\" -- *.css\nSaved working directory and index state On main: CSSファイルのみをスタッシュ\n```\n\n## ヒント\n\n### 説明的なメッセージを使用する\n\n後でスタッシュを識別しやすくするために、常に`git stash save \"メッセージ\"`で説明的なメッセージを使用しましょう。\n\n### スタッシュの内容を適用前に確認する\n\n`git stash show -p stash@{n}`を使用して、スタッシュを適用する前に完全な差分を確認しましょう。\n\n### スタッシュからブランチを作成する\n\nスタッシュした変更を独自のブランチに含めるべきだと気づいた場合は、`git stash branch <ブランチ名> [stash]`を使用して、スタッシュした変更を適用した新しいブランチを作成できます。\n\n### 部分的なスタッシュ\n\n`git stash -p`（または`--patch`）を使用して、スタッシュする変更を対話的に選択し、作業ディレクトリに一部の変更を残すことができます。\n\n## よくある質問\n\n#### Q1. ブランチを切り替えるとスタッシュはどうなりますか？\nA. スタッシュはブランチとは別に保存され、どのブランチにいても引き続きアクセスできます。\n\n#### Q2. スタッシュはどれくらい長く保持されますか？\nA. スタッシュは明示的に削除するか、スタッシュリストをクリアするまで無期限に保持されます。\n\n#### Q3. 削除したスタッシュを復元できますか？\nA. はい、スタッシュのコミットID（削除時に表示される）がわかっていれば、gitのreflogの有効期限内であれば`git stash apply <コミットID>`を使用して復元できます。\n\n#### Q4. 特定のファイルだけをスタッシュするにはどうすればよいですか？\nA. `git stash push [--] [<パス指定>...]`を使用して特定のファイルをスタッシュできます。例：`git stash push -- file1.txt file2.js`\n\n#### Q5. `pop`と`apply`の違いは何ですか？\nA. `pop`はスタッシュを適用してスタッシュリストから削除しますが、`apply`はスタッシュを適用するだけでスタッシュリストには残します。\n\n## 参考資料\n\nhttps://git-scm.com/docs/git-stash\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1647,
    "output_tokens": 2040
  }
}