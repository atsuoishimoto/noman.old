{
  "id": "msg_019C1zu25EaZWa7HoqJVv4Gm",
  "content": [
    {
      "text": "# test コマンド\n\n式を評価し、評価結果に基づいてステータスを返します。\n\n## 概要\n\n`test` コマンドは条件式を評価し、0（真）または1（偽）のステータスを返します。シェルスクリプトでよく使用され、ファイル属性のテスト、文字列の比較、数値の評価などに使われます。このコマンドは `if` 文と共に使用されたり、条件に基づいて判断を行うシェルスクリプトでよく使われます。\n\n## オプション\n\n### **-e**（ファイルが存在する）\n\nファイルが存在するかテストします。\n\n```console\n$ test -e /etc/passwd && echo \"ファイルが存在します\" || echo \"ファイルが存在しません\"\nファイルが存在します\n```\n\n### **-f**（通常ファイル）\n\nファイルが存在し、通常ファイルであるかテストします。\n\n```console\n$ test -f /etc/passwd && echo \"通常ファイルです\" || echo \"通常ファイルではありません\"\n通常ファイルです\n```\n\n### **-d**（ディレクトリ）\n\nファイルが存在し、ディレクトリであるかテストします。\n\n```console\n$ test -d /etc && echo \"ディレクトリが存在します\" || echo \"ディレクトリではありません\"\nディレクトリが存在します\n```\n\n### **-r**（読み取り可能）\n\nファイルが存在し、読み取り可能であるかテストします。\n\n```console\n$ test -r /etc/passwd && echo \"ファイルは読み取り可能です\" || echo \"ファイルは読み取り可能ではありません\"\nファイルは読み取り可能です\n```\n\n### **-w**（書き込み可能）\n\nファイルが存在し、書き込み可能であるかテストします。\n\n```console\n$ test -w /tmp && echo \"ディレクトリは書き込み可能です\" || echo \"ディレクトリは書き込み可能ではありません\"\nディレクトリは書き込み可能です\n```\n\n### **-x**（実行可能）\n\nファイルが存在し、実行可能であるかテストします。\n\n```console\n$ test -x /bin/ls && echo \"ファイルは実行可能です\" || echo \"ファイルは実行可能ではありません\"\nファイルは実行可能です\n```\n\n### **-z**（文字列が空）\n\n文字列の長さがゼロであるかテストします。\n\n```console\n$ test -z \"\" && echo \"文字列は空です\" || echo \"文字列は空ではありません\"\n文字列は空です\n```\n\n### **-n**（文字列が空でない）\n\n文字列の長さがゼロでないかテストします。\n\n```console\n$ test -n \"hello\" && echo \"文字列は空ではありません\" || echo \"文字列は空です\"\n文字列は空ではありません\n```\n\n## 使用例\n\n### 文字列の比較\n\n```console\n$ test \"apple\" = \"apple\" && echo \"文字列は等しいです\" || echo \"文字列は等しくありません\"\n文字列は等しいです\n\n$ test \"apple\" != \"orange\" && echo \"文字列は異なります\" || echo \"文字列は同じです\"\n文字列は異なります\n```\n\n### 数値の比較\n\n```console\n$ test 10 -eq 10 && echo \"数値は等しいです\" || echo \"数値は等しくありません\"\n数値は等しいです\n\n$ test 5 -lt 10 && echo \"最初の数値は2番目より小さいです\" || echo \"最初の数値は2番目より小さくありません\"\n最初の数値は2番目より小さいです\n```\n\n### if文でのtestの使用\n\n```console\n$ if test -f /etc/hosts; then echo \"hostsファイルが存在します\"; else echo \"hostsファイルが見つかりません\"; fi\nhostsファイルが存在します\n```\n\n### [ ] 構文の使用（testと同等）\n\n```console\n$ [ -d /tmp ] && echo \"tmpはディレクトリです\" || echo \"tmpはディレクトリではありません\"\ntmpはディレクトリです\n```\n\n## ヒント:\n\n### [ ] を代替として使用する\n\n`[` コマンドは `test` と同一です。`test expression` の代わりに `[ expression ]` を使用できます。`[` の後と `]` の前にスペースを入れることを忘れないでください。\n\n### Bashでの二重角括弧\n\nBashでは、標準の `test` コマンドよりも多くの機能を提供する `[[ ]]` を使用できます。パターンマッチングや論理演算子などが含まれます。\n\n### テストの組み合わせ\n\nテストを組み合わせるには `-a`（AND）と `-o`（OR）を使用できますが、これらは別々のtestコマンド間で `&&` と `||` を使用する方法に比べて非推奨とされています。\n\n### 一般的な数値比較\n\n- `-eq`: 等しい\n- `-ne`: 等しくない\n- `-lt`: より小さい\n- `-le`: 以下\n- `-gt`: より大きい\n- `-ge`: 以上\n\n## よくある質問\n\n#### Q1. `test` と `[ ]` の違いは何ですか？\nA. 機能的には同一です。`[` コマンドは `test` の別名で、最後の引数として閉じる `]` が必要です。\n\n#### Q2. 変数が空かどうかをテストするにはどうすればよいですか？\nA. 空かどうかを確認するには `test -z \"$variable\"` を、空でないかを確認するには `test -n \"$variable\"` を使用します。\n\n#### Q3. あるファイルが別のファイルより新しいかをテストするにはどうすればよいですか？\nA. `test file1 -nt file2` を使用して、file1がfile2より新しいかどうかを確認します。\n\n#### Q4. `[ ]` と `[[ ]]` の違いは何ですか？\nA. `[[ ]]` はBashの拡張機能で、パターンマッチングや空の変数のより良い処理など、より多くの機能を提供します。一方、`[ ]` は標準のPOSIX testコマンドです。\n\n## 参考文献\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html\n\n## 改訂履歴\n\n- 2025/05/06 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1350,
    "output_tokens": 1886
  }
}