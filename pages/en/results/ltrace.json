{
  "id": "msg_01Cghvq1jdgEb2GEK9zCBA9q",
  "content": [
    {
      "text": "# ltrace command\n\nTrace library calls of a program.\n\n## Overview\n\n`ltrace` is a debugging utility that displays dynamic library calls made by a program during execution. It can also show system calls and signals received. This tool is valuable for understanding how a program interacts with libraries, diagnosing issues, and reverse engineering applications.\n\n## Options\n\n### **-c**\n\nCount time, calls, and report a summary at the end.\n\n```console\n$ ltrace -c ls\n% time     seconds  usecs/call     calls      function\n------ ----------- ----------- --------- --------------------\n 28.57    0.000040          8         5 strlen\n 21.43    0.000030         15         2 readdir64\n 14.29    0.000020         10         2 closedir\n 14.29    0.000020         10         2 opendir\n  7.14    0.000010         10         1 __errno_location\n  7.14    0.000010         10         1 fclose\n  7.14    0.000010         10         1 fopen\n------ ----------- ----------- --------- --------------------\n100.00    0.000140                    14 total\n```\n\n### **-f**\n\nTrace child processes as they are created by currently traced processes.\n\n```console\n$ ltrace -f ./parent_program\n[pid 12345] malloc(32)                                      = 0x55d45e9a12a0\n[pid 12345] fork()                                          = 12346\n[pid 12346] malloc(64)                                      = 0x55d45e9a1340\n```\n\n### **-e PATTERN**\n\nSpecify which library calls to trace or which not to trace.\n\n```console\n$ ltrace -e malloc+free ls\nls->malloc(24)                                             = 0x55d45e9a12a0\nls->malloc(13)                                             = 0x55d45e9a1340\nls->free(0x55d45e9a12a0)                                   = <void>\nls->free(0x55d45e9a1340)                                   = <void>\n```\n\n### **-p PID**\n\nAttach to the process with the specified PID and begin tracing.\n\n```console\n$ ltrace -p 1234\n[pid 1234] read(5, \"Hello World\", 1024)                    = 11\n[pid 1234] write(1, \"Hello World\", 11)                     = 11\n```\n\n### **-S**\n\nDisplay system calls as well as library calls.\n\n```console\n$ ltrace -S ls\nSYS_brk(NULL)                                              = 0x55d45e9a1000\nSYS_access(\"/etc/ld.so.preload\", R_OK)                     = -2\nmalloc(256)                                                = 0x55d45e9a12a0\nSYS_open(\"/etc/ld.so.cache\", O_RDONLY)                     = 3\n```\n\n### **-o FILENAME**\n\nWrite the trace output to the file FILENAME rather than to stderr.\n\n```console\n$ ltrace -o trace.log ls\n$ cat trace.log\nmalloc(256)                                                = 0x55d45e9a12a0\nfree(0x55d45e9a12a0)                                       = <void>\n```\n\n## Usage Examples\n\n### Basic Usage\n\n```console\n$ ltrace ls\n__libc_start_main(0x401670, 1, 0x7ffd74a3c648, 0x406750 <unfinished ...>\nstrrchr(\"ls\", '/')                                         = NULL\nsetlocale(LC_ALL, \"\")                                      = \"en_US.UTF-8\"\nbindtextdomain(\"coreutils\", \"/usr/share/locale\")           = \"/usr/share/locale\"\ntextdomain(\"coreutils\")                                    = \"coreutils\"\n__cxa_atexit(0x402860, 0, 0, 0x736c6974)                   = 0\nisatty(1)                                                  = 1\ngetenv(\"QUOTING_STYLE\")                                    = NULL\ngetenv(\"COLUMNS\")                                          = NULL\nioctl(1, 21523, 0x7ffd74a3c4e0)                            = 0\n...\n+++ exited (status 0) +++\n```\n\n### Tracing Specific Functions\n\n```console\n$ ltrace -e malloc+free+open ./program\nprogram->malloc(1024)                                      = 0x55d45e9a12a0\nprogram->open(\"/etc/passwd\", 0, 0)                         = 3\nprogram->free(0x55d45e9a12a0)                              = <void>\n```\n\n### Tracing with Time Information\n\n```console\n$ ltrace -tt ls\n15:30:45.789012 __libc_start_main(0x401670, 1, 0x7ffd74a3c648, 0x406750 <unfinished ...>\n15:30:45.789234 strrchr(\"ls\", '/')                         = NULL\n15:30:45.789456 setlocale(LC_ALL, \"\")                      = \"en_US.UTF-8\"\n...\n15:30:45.795678 +++ exited (status 0) +++\n```\n\n## Tips\n\n### Filter Out Noise\n\nUse the `-e` option to focus on specific function calls you're interested in, reducing output clutter:\n```console\n$ ltrace -e malloc+free+open ./program\n```\n\n### Combine with Other Tools\n\nPipe ltrace output to grep to find specific function calls:\n```console\n$ ltrace ./program 2>&1 | grep \"open\"\n```\n\n### Trace Child Processes\n\nWhen debugging complex applications that spawn child processes, use `-f` to follow them:\n```console\n$ ltrace -f ./server\n```\n\n### Save Output for Later Analysis\n\nFor long-running programs, save the trace to a file with `-o`:\n```console\n$ ltrace -o debug.log ./program\n```\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between ltrace and strace?\nA. `ltrace` traces library calls (functions from shared libraries), while `strace` traces system calls (interactions with the kernel). Use `ltrace -S` to see both.\n\n#### Q2. Why doesn't ltrace show all function calls?\nA. `ltrace` only shows calls to external libraries, not internal function calls within the program itself. For that, you would need a profiler or debugger.\n\n#### Q3. Can ltrace slow down the traced program?\nA. Yes, tracing adds significant overhead. The program will run slower, especially with `-f` (follow forks) enabled.\n\n#### Q4. How do I trace a program that's already running?\nA. Use `ltrace -p PID` to attach to an already running process.\n\n#### Q5. Can I use ltrace on statically linked binaries?\nA. No, `ltrace` primarily works with dynamically linked executables since it intercepts calls to shared libraries.\n\n## References\n\nhttps://man7.org/linux/man-pages/man1/ltrace.1.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1679,
    "output_tokens": 1764
  }
}