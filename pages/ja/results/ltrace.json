{
  "id": "msg_01QT16bjwtaS9oCdafAVPxqM",
  "content": [
    {
      "text": "# ltrace コマンド\n\nプログラムのライブラリ呼び出しをトレースします。\n\n## 概要\n\n`ltrace` は、プログラム実行中に行われる動的ライブラリ呼び出しを表示するデバッグユーティリティです。システムコールや受信したシグナルも表示できます。このツールは、プログラムがライブラリとどのように相互作用するかを理解したり、問題を診断したり、アプリケーションのリバースエンジニアリングを行ったりする際に役立ちます。\n\n## オプション\n\n### **-c**\n\n時間、呼び出し回数をカウントし、最後に要約レポートを表示します。\n\n```console\n$ ltrace -c ls\n% time     seconds  usecs/call     calls      function\n------ ----------- ----------- --------- --------------------\n 28.57    0.000040          8         5 strlen\n 21.43    0.000030         15         2 readdir64\n 14.29    0.000020         10         2 closedir\n 14.29    0.000020         10         2 opendir\n  7.14    0.000010         10         1 __errno_location\n  7.14    0.000010         10         1 fclose\n  7.14    0.000010         10         1 fopen\n------ ----------- ----------- --------- --------------------\n100.00    0.000140                    14 total\n```\n\n### **-f**\n\n現在トレース中のプロセスによって作成される子プロセスをトレースします。\n\n```console\n$ ltrace -f ./parent_program\n[pid 12345] malloc(32)                                      = 0x55d45e9a12a0\n[pid 12345] fork()                                          = 12346\n[pid 12346] malloc(64)                                      = 0x55d45e9a1340\n```\n\n### **-e PATTERN**\n\nトレースするライブラリ呼び出しやトレースしないライブラリ呼び出しを指定します。\n\n```console\n$ ltrace -e malloc+free ls\nls->malloc(24)                                             = 0x55d45e9a12a0\nls->malloc(13)                                             = 0x55d45e9a1340\nls->free(0x55d45e9a12a0)                                   = <void>\nls->free(0x55d45e9a1340)                                   = <void>\n```\n\n### **-p PID**\n\n指定されたPIDのプロセスにアタッチしてトレースを開始します。\n\n```console\n$ ltrace -p 1234\n[pid 1234] read(5, \"Hello World\", 1024)                    = 11\n[pid 1234] write(1, \"Hello World\", 11)                     = 11\n```\n\n### **-S**\n\nライブラリ呼び出しに加えてシステムコールも表示します。\n\n```console\n$ ltrace -S ls\nSYS_brk(NULL)                                              = 0x55d45e9a1000\nSYS_access(\"/etc/ld.so.preload\", R_OK)                     = -2\nmalloc(256)                                                = 0x55d45e9a12a0\nSYS_open(\"/etc/ld.so.cache\", O_RDONLY)                     = 3\n```\n\n### **-o FILENAME**\n\nトレース出力を標準エラー出力ではなく、指定したファイルに書き込みます。\n\n```console\n$ ltrace -o trace.log ls\n$ cat trace.log\nmalloc(256)                                                = 0x55d45e9a12a0\nfree(0x55d45e9a12a0)                                       = <void>\n```\n\n## 使用例\n\n### 基本的な使い方\n\n```console\n$ ltrace ls\n__libc_start_main(0x401670, 1, 0x7ffd74a3c648, 0x406750 <unfinished ...>\nstrrchr(\"ls\", '/')                                         = NULL\nsetlocale(LC_ALL, \"\")                                      = \"en_US.UTF-8\"\nbindtextdomain(\"coreutils\", \"/usr/share/locale\")           = \"/usr/share/locale\"\ntextdomain(\"coreutils\")                                    = \"coreutils\"\n__cxa_atexit(0x402860, 0, 0, 0x736c6974)                   = 0\nisatty(1)                                                  = 1\ngetenv(\"QUOTING_STYLE\")                                    = NULL\ngetenv(\"COLUMNS\")                                          = NULL\nioctl(1, 21523, 0x7ffd74a3c4e0)                            = 0\n...\n+++ exited (status 0) +++\n```\n\n### 特定の関数をトレースする\n\n```console\n$ ltrace -e malloc+free+open ./program\nprogram->malloc(1024)                                      = 0x55d45e9a12a0\nprogram->open(\"/etc/passwd\", 0, 0)                         = 3\nprogram->free(0x55d45e9a12a0)                              = <void>\n```\n\n### 時間情報付きでトレースする\n\n```console\n$ ltrace -tt ls\n15:30:45.789012 __libc_start_main(0x401670, 1, 0x7ffd74a3c648, 0x406750 <unfinished ...>\n15:30:45.789234 strrchr(\"ls\", '/')                         = NULL\n15:30:45.789456 setlocale(LC_ALL, \"\")                      = \"en_US.UTF-8\"\n...\n15:30:45.795678 +++ exited (status 0) +++\n```\n\n## ヒント\n\n### ノイズをフィルタリングする\n\n`-e` オプションを使用して、関心のある特定の関数呼び出しに焦点を当て、出力の混雑を減らします：\n```console\n$ ltrace -e malloc+free+open ./program\n```\n\n### 他のツールと組み合わせる\n\nltraceの出力をgrepにパイプして、特定の関数呼び出しを見つけます：\n```console\n$ ltrace ./program 2>&1 | grep \"open\"\n```\n\n### 子プロセスをトレースする\n\n子プロセスを生成する複雑なアプリケーションをデバッグする場合は、`-f` を使用して子プロセスも追跡します：\n```console\n$ ltrace -f ./server\n```\n\n### 後で分析するために出力を保存する\n\n長時間実行されるプログラムの場合、`-o` でトレースをファイルに保存します：\n```console\n$ ltrace -o debug.log ./program\n```\n\n## よくある質問\n\n#### Q1. ltraceとstraceの違いは何ですか？\nA. `ltrace` はライブラリ呼び出し（共有ライブラリからの関数）をトレースし、`strace` はシステムコール（カーネルとの相互作用）をトレースします。`ltrace -S` を使用すると両方を見ることができます。\n\n#### Q2. なぜltraceはすべての関数呼び出しを表示しないのですか？\nA. `ltrace` は外部ライブラリへの呼び出しのみを表示し、プログラム内部の関数呼び出しは表示しません。それにはプロファイラやデバッガが必要です。\n\n#### Q3. ltraceはトレース対象のプログラムを遅くすることがありますか？\nA. はい、トレースには大きなオーバーヘッドがあります。特に `-f`（フォークを追跡）を有効にすると、プログラムの実行速度は遅くなります。\n\n#### Q4. すでに実行中のプログラムをトレースするにはどうすればよいですか？\nA. `ltrace -p PID` を使用して、すでに実行中のプロセスにアタッチします。\n\n#### Q5. 静的にリンクされたバイナリでltraceを使用できますか？\nA. いいえ、`ltrace` は主に動的にリンクされた実行ファイルで動作します。共有ライブラリへの呼び出しを傍受するためです。\n\n## 参考文献\n\nhttps://man7.org/linux/man-pages/man1/ltrace.1.html\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1894,
    "output_tokens": 2322
  }
}