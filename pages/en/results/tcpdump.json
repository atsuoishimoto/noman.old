{
  "id": "msg_01WVH3BbH8mBwBPUgGV9cEnh",
  "content": [
    {
      "text": "# tcpdump command\n\nCapture and analyze network traffic on a system.\n\n## Overview\n\n`tcpdump` is a powerful command-line packet analyzer that allows users to capture and display TCP/IP and other packets being transmitted or received over a network. It's commonly used for network troubleshooting, security analysis, and monitoring network activity.\n\n## Options\n\n### **-i interface**\n\nSpecify the network interface to listen on\n\n```console\n$ tcpdump -i eth0\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n13:45:22.357932 IP host1.ssh > host2.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n### **-n**\n\nDon't convert addresses (i.e., host addresses, port numbers, etc.) to names\n\n```console\n$ tcpdump -n\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n13:46:12.357932 IP 192.168.1.10.22 > 192.168.1.20.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n### **-c count**\n\nExit after capturing count packets\n\n```console\n$ tcpdump -c 5\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n5 packets captured\n5 packets received by filter\n0 packets dropped by kernel\n```\n\n### **-w file**\n\nWrite the raw packets to file rather than parsing and printing them out\n\n```console\n$ tcpdump -w capture.pcap\ntcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n^C\n45 packets captured\n45 packets received by filter\n0 packets dropped by kernel\n```\n\n### **-r file**\n\nRead packets from a file (previously created with -w option)\n\n```console\n$ tcpdump -r capture.pcap\nreading from file capture.pcap, link-type EN10MB (Ethernet)\n13:45:22.357932 IP host1.ssh > host2.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n### **-v, -vv, -vvv**\n\nIncrease verbosity level (more packet information)\n\n```console\n$ tcpdump -v\ntcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n13:45:22.357932 IP (tos 0x10, ttl 64, id 12345, offset 0, flags [DF], proto TCP (6), length 104) host1.ssh > host2.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n## Usage Examples\n\n### Capture packets on a specific interface\n\n```console\n$ tcpdump -i eth0\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n13:45:22.357932 IP host1.ssh > host2.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n### Filter traffic by host\n\n```console\n$ tcpdump host 192.168.1.10\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n13:45:22.357932 IP 192.168.1.10.ssh > host2.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n### Filter traffic by port\n\n```console\n$ tcpdump port 80\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n13:45:22.357932 IP host1.http > host2.52986: Flags [P.], seq 1:37, ack 1, win 501, options [nop,nop,TS val 1089067 ecr 1089067], length 36\n```\n\n### Capture and save packets to a file\n\n```console\n$ tcpdump -w capture.pcap -i eth0\ntcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes\n^C\n45 packets captured\n45 packets received by filter\n0 packets dropped by kernel\n```\n\n## Tips:\n\n### Run with sudo for full access\n\nMost systems require root privileges to capture packets. Use `sudo tcpdump` to ensure you have proper permissions.\n\n### Use expression filters for targeted capture\n\nCombine filters to narrow down traffic: `tcpdump 'tcp port 80 and host 192.168.1.10'` captures only HTTP traffic to/from a specific host.\n\n### Disable name resolution for faster capture\n\nUse `-n` to prevent DNS lookups which can slow down packet capture, especially in busy networks.\n\n### Capture full packet content\n\nUse `-s 0` to capture full packets instead of just headers (default is 262144 bytes in modern versions).\n\n### Use Wireshark for analysis\n\nSave captures with `-w filename.pcap` and open them in Wireshark for detailed graphical analysis.\n\n## Frequently Asked Questions\n\n#### Q1. How do I capture packets on a specific interface?\nA. Use `tcpdump -i interface_name` (e.g., `tcpdump -i eth0`).\n\n#### Q2. How can I save captured packets to a file?\nA. Use `tcpdump -w filename.pcap` to save raw packets to a file.\n\n#### Q3. How do I filter traffic by IP address?\nA. Use `tcpdump host 192.168.1.10` to capture traffic to/from that IP.\n\n#### Q4. How do I filter by port number?\nA. Use `tcpdump port 80` to capture HTTP traffic or any traffic on port 80.\n\n#### Q5. How can I see more detailed packet information?\nA. Use increasing verbosity with `-v`, `-vv`, or `-vvv` flags.\n\n## References\n\nhttps://www.tcpdump.org/manpages/tcpdump.1.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1692,
    "output_tokens": 1783
  }
}