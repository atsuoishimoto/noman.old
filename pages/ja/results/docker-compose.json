{
  "id": "msg_013dqnsXf2cj13NBB22fDAwh",
  "content": [
    {
      "text": "# docker-compose コマンド\n\n複数コンテナのDockerアプリケーションを定義して実行します。\n\n## 概要\n\nDocker Composeは、複数コンテナのDockerアプリケーションを定義・実行するためのツールです。YAMLファイルを使用してアプリケーションのサービス、ネットワーク、ボリュームを設定し、単一のコマンドですべてのサービスを作成・起動できます。複数の相互接続されたコンテナを必要とする複雑なアプリケーションの管理プロセスを簡素化します。\n\n## オプション\n\n### **up**\n\nComposeファイルで定義されたコンテナを作成して起動します\n\n```console\n$ docker-compose up\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\nAttaching to myapp_db_1, myapp_redis_1, myapp_web_1\n```\n\n### **-d, --detach**\n\nコンテナをバックグラウンドで実行します\n\n```console\n$ docker-compose up -d\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\n```\n\n### **down**\n\nコンテナ、ネットワーク、イメージ、ボリュームを停止して削除します\n\n```console\n$ docker-compose down\nStopping myapp_web_1   ... done\nStopping myapp_redis_1 ... done\nStopping myapp_db_1    ... done\nRemoving myapp_web_1   ... done\nRemoving myapp_redis_1 ... done\nRemoving myapp_db_1    ... done\nRemoving network myapp_default\n```\n\n### **ps**\n\nコンテナを一覧表示します\n\n```console\n$ docker-compose ps\n     Name                    Command               State           Ports         \n--------------------------------------------------------------------------------\nmyapp_db_1      docker-entrypoint.sh mysqld      Up      3306/tcp, 33060/tcp\nmyapp_redis_1   docker-entrypoint.sh redis ...   Up      6379/tcp              \nmyapp_web_1     docker-entrypoint.sh npm start   Up      0.0.0.0:3000->3000/tcp\n```\n\n### **logs**\n\nコンテナからの出力を表示します\n\n```console\n$ docker-compose logs\nAttaching to myapp_web_1, myapp_redis_1, myapp_db_1\nweb_1    | > myapp@1.0.0 start\nweb_1    | > node server.js\nweb_1    | Server listening on port 3000\ndb_1     | 2023-05-05T12:34:56.789Z 0 [Note] mysqld: ready for connections.\n```\n\n### **-f, --follow**\n\nログ出力をフォローします（logsコマンドと共に使用）\n\n```console\n$ docker-compose logs -f\nAttaching to myapp_web_1, myapp_redis_1, myapp_db_1\nweb_1    | > myapp@1.0.0 start\nweb_1    | > node server.js\nweb_1    | Server listening on port 3000\n```\n\n### **build**\n\nサービスをビルドまたは再ビルドします\n\n```console\n$ docker-compose build\nBuilding web\nStep 1/10 : FROM node:14\n ---> 1234567890ab\nStep 2/10 : WORKDIR /app\n ---> Using cache\n ---> abcdef123456\n...\nSuccessfully built 0123456789ab\nSuccessfully tagged myapp_web:latest\n```\n\n### **exec**\n\n実行中のコンテナでコマンドを実行します\n\n```console\n$ docker-compose exec web npm test\n> myapp@1.0.0 test\n> jest\n\nPASS  ./app.test.js\n  ✓ should return 200 (32ms)\n\nTest Suites: 1 passed, 1 total\nTests:       1 passed, 1 total\n```\n\n### **-f, --file**\n\n別のComposeファイルを指定します\n\n```console\n$ docker-compose -f docker-compose.prod.yml up -d\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\n```\n\n## 使用例\n\n### 開発環境の起動\n\n```console\n$ docker-compose up\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\nAttaching to myapp_db_1, myapp_redis_1, myapp_web_1\n```\n\n### サービスの再ビルドと起動\n\n```console\n$ docker-compose up --build\nBuilding web\nStep 1/10 : FROM node:14\n...\nSuccessfully built 0123456789ab\nSuccessfully tagged myapp_web:latest\nCreating network \"myapp_default\" with the default driver\nCreating myapp_db_1    ... done\nCreating myapp_redis_1 ... done\nCreating myapp_web_1   ... done\n```\n\n### サービスコンテナでの一回限りのコマンド実行\n\n```console\n$ docker-compose run web npm install express\nCreating myapp_web_run ... done\n+ express@4.18.2\nadded 57 packages in 2.5s\n```\n\n### サービスのスケーリング\n\n```console\n$ docker-compose up -d --scale web=3\nCreating myapp_web_1 ... done\nCreating myapp_web_2 ... done\nCreating myapp_web_3 ... done\n```\n\n## ヒント:\n\n### 環境変数を使用する\n\nパスワードやAPIキーなどの機密情報は、Composeファイルにハードコーディングする代わりに`.env`ファイルに保存しましょう。\n\n```console\n$ cat .env\nDB_PASSWORD=secretpassword\nAPI_KEY=1234567890abcdef\n```\n\n### デフォルトのComposeファイルをオーバーライドする\n\n開発固有の設定のために`docker-compose.override.yml`ファイルを作成すると、基本の`docker-compose.yml`ファイルと一緒に自動的に使用されます。\n\n### 永続化のために名前付きボリュームを使用する\n\n名前付きボリュームはコンテナの再起動や再ビルド間でデータを保持します：\n\n```yaml\nvolumes:\n  db_data:\n\nservices:\n  db:\n    image: postgres\n    volumes:\n      - db_data:/var/lib/postgresql/data\n```\n\n### Composeファイルにバージョン管理を使用する\n\n変更を追跡し、チームメンバーとコラボレーションするために、Composeファイルをバージョン管理下に置きましょう。\n\n## よくある質問\n\n#### Q1. `docker-compose up`と`docker-compose run`の違いは何ですか？\nA. `up`はComposeファイルで定義されたすべてのサービスを起動しますが、`run`は特定のサービスを起動して一回限りのコマンドを実行します。\n\n#### Q2. 単一のサービスを更新するにはどうすればよいですか？\nA. `docker-compose up --build <サービス名>`を使用して、特定のサービスを再ビルドして更新します。\n\n#### Q3. 特定のサービスのログを表示するにはどうすればよいですか？\nA. `docker-compose logs <サービス名>`を使用して、特定のサービスのログを表示します。\n\n#### Q4. コンテナを削除せずにサービスを停止するにはどうすればよいですか？\nA. `docker-compose stop`を使用して、コンテナ、ネットワーク、ボリュームを削除せずにサービスを停止します。\n\n#### Q5. 本番環境でdocker-composeを実行するにはどうすればよいですか？\nA. docker-composeは本番環境でも使用できますが、本番デプロイメントにはDocker SwarmやKubernetesがより適している場合が多いです。Composeを使用する場合は、適切な設定を持つ本番環境専用のComposeファイルを作成してください。\n\n## 参考文献\n\nhttps://docs.docker.com/compose/reference/\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1885,
    "output_tokens": 2315
  }
}