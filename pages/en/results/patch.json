{
  "id": "msg_01GJqHYuv1PMjqnBWtmg8TD3",
  "content": [
    {
      "text": "# patch command\n\nApply a diff file to an original file or files.\n\n## Overview\n\nThe `patch` command applies changes (patches) to files. It reads a patch file (typically created by the `diff` command) and modifies the target files to incorporate those changes. This is commonly used for applying bug fixes, updates, or modifications to source code and text files.\n\n## Options\n\n### **-p[num], --strip=[num]**\n\nStrip the smallest prefix containing `num` leading slashes from each file name in the patch. Default is 1.\n\n```console\n$ patch -p1 < changes.patch\npatching file src/main.c\n```\n\n### **-b, --backup**\n\nCreate a backup of each file before modifying it.\n\n```console\n$ patch -b file.txt < changes.patch\npatching file file.txt\n```\n\n### **-R, --reverse**\n\nAssume patches were created with old and new files swapped, effectively reversing the patch.\n\n```console\n$ patch -R < changes.patch\npatching file file.txt\n```\n\n### **-i file, --input=file**\n\nRead patch from specified file instead of stdin.\n\n```console\n$ patch -i changes.patch\npatching file file.txt\n```\n\n### **-d dir, --directory=dir**\n\nChange to the specified directory before applying the patch.\n\n```console\n$ patch -d src/ -i ../changes.patch\npatching file main.c\n```\n\n### **-E, --remove-empty-files**\n\nRemove output files that become empty after applying the patch.\n\n```console\n$ patch -E < changes.patch\npatching file empty.txt\nremoved empty file empty.txt\n```\n\n### **-N, --forward**\n\nIgnore patches that appear to be reversed or already applied.\n\n```console\n$ patch -N < changes.patch\npatching file file.txt\n```\n\n### **-f, --force**\n\nForce patching even when the patch appears to be incorrect.\n\n```console\n$ patch -f < changes.patch\npatching file file.txt\nHunk #1 FAILED at 10.\n1 out of 1 hunk FAILED -- saving rejects to file file.txt.rej\n```\n\n### **-t, --batch**\n\nSkip user interaction; assume \"yes\" to all questions.\n\n```console\n$ patch -t < changes.patch\npatching file file.txt\n```\n\n## Usage Examples\n\n### Applying a patch file to a single file\n\n```console\n$ patch original.txt < changes.patch\npatching file original.txt\n```\n\n### Applying a patch with backup files\n\n```console\n$ patch -b program.c < bugfix.patch\npatching file program.c\n```\n\n### Applying a patch to a directory\n\n```console\n$ cd project/\n$ patch -p1 < ../feature.patch\npatching file src/main.c\npatching file include/header.h\n```\n\n### Reversing a patch\n\n```console\n$ patch -R < changes.patch\npatching file file.txt\n```\n\n## Tips:\n\n### Examine a Patch Before Applying\n\nUse `patch --dry-run` to see what would happen without actually changing any files. This helps prevent unexpected modifications.\n\n### Handle Rejected Patches\n\nWhen a patch fails to apply cleanly, `patch` creates `.rej` files containing the rejected hunks. Examine these files to manually apply the changes.\n\n### Create Context-Aware Patches\n\nWhen creating patches with `diff`, use the `-u` option (unified format) to include context lines. This helps `patch` apply changes more accurately, especially when the target files have been modified.\n\n### Apply Patches to the Right Directory\n\nUse the `-p` option to strip path prefixes when applying patches to a different directory structure than where they were created.\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between a unified and context diff?\nA. Unified diffs (`diff -u`) show changed lines with context in a single block prefixed with `+` and `-`, while context diffs (`diff -c`) show before and after blocks separately. Unified diffs are more compact and commonly used.\n\n#### Q2. How do I apply a patch that was created in a different directory?\nA. Use the `-p` option to strip directory levels from filenames in the patch. For example, `patch -p1` removes the first directory component.\n\n#### Q3. How can I reverse a patch I've applied?\nA. Use `patch -R` with the same patch file to undo the changes.\n\n#### Q4. What do I do if a patch fails to apply?\nA. Examine the `.rej` files created by patch, which contain the hunks that couldn't be applied. You may need to manually apply these changes or update the patch file.\n\n## References\n\nhttps://www.gnu.org/software/diffutils/manual/html_node/Invoking-patch.html\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1632,
    "output_tokens": 1139
  }
}