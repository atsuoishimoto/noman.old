{
  "id": "msg_015QP4ctNe6ChZY6jg7GyZxZ",
  "content": [
    {
      "text": "# test command\n\nEvaluate expressions and return a status based on the evaluation result.\n\n## Overview\n\nThe `test` command evaluates conditional expressions and returns a status of 0 (true) or 1 (false). It's commonly used in shell scripts to test file attributes, compare strings, and evaluate numeric values. The command is often used with `if` statements or in shell scripts to make decisions based on conditions.\n\n## Options\n\n### **-e** (file exists)\n\nTests if a file exists.\n\n```console\n$ test -e /etc/passwd && echo \"File exists\" || echo \"File does not exist\"\nFile exists\n```\n\n### **-f** (regular file)\n\nTests if a file exists and is a regular file.\n\n```console\n$ test -f /etc/passwd && echo \"Regular file\" || echo \"Not a regular file\"\nRegular file\n```\n\n### **-d** (directory)\n\nTests if a file exists and is a directory.\n\n```console\n$ test -d /etc && echo \"Directory exists\" || echo \"Not a directory\"\nDirectory exists\n```\n\n### **-r** (readable)\n\nTests if a file exists and is readable.\n\n```console\n$ test -r /etc/passwd && echo \"File is readable\" || echo \"File is not readable\"\nFile is readable\n```\n\n### **-w** (writable)\n\nTests if a file exists and is writable.\n\n```console\n$ test -w /tmp && echo \"Directory is writable\" || echo \"Directory is not writable\"\nDirectory is writable\n```\n\n### **-x** (executable)\n\nTests if a file exists and is executable.\n\n```console\n$ test -x /bin/ls && echo \"File is executable\" || echo \"File is not executable\"\nFile is executable\n```\n\n### **-z** (string is empty)\n\nTests if the length of a string is zero.\n\n```console\n$ test -z \"\" && echo \"String is empty\" || echo \"String is not empty\"\nString is empty\n```\n\n### **-n** (string is not empty)\n\nTests if the length of a string is non-zero.\n\n```console\n$ test -n \"hello\" && echo \"String is not empty\" || echo \"String is empty\"\nString is not empty\n```\n\n## Usage Examples\n\n### Comparing strings\n\n```console\n$ test \"apple\" = \"apple\" && echo \"Strings are equal\" || echo \"Strings are not equal\"\nStrings are equal\n\n$ test \"apple\" != \"orange\" && echo \"Strings are different\" || echo \"Strings are the same\"\nStrings are different\n```\n\n### Comparing numbers\n\n```console\n$ test 10 -eq 10 && echo \"Numbers are equal\" || echo \"Numbers are not equal\"\nNumbers are equal\n\n$ test 5 -lt 10 && echo \"First number is less than second\" || echo \"First number is not less than second\"\nFirst number is less than second\n```\n\n### Using test in if statements\n\n```console\n$ if test -f /etc/hosts; then echo \"hosts file exists\"; else echo \"hosts file not found\"; fi\nhosts file exists\n```\n\n### Using the [ ] syntax (equivalent to test)\n\n```console\n$ [ -d /tmp ] && echo \"tmp is a directory\" || echo \"tmp is not a directory\"\ntmp is a directory\n```\n\n## Tips:\n\n### Use [ ] as an Alternative\n\nThe `[` command is identical to `test`. You can use `[ expression ]` instead of `test expression`. Remember to include a space after `[` and before `]`.\n\n### Double Brackets in Bash\n\nIn Bash, you can use `[[ ]]` which provides more features than the standard `test` command, including pattern matching and logical operators.\n\n### Combining Tests\n\nUse `-a` (AND) and `-o` (OR) to combine tests, but be aware that these are considered deprecated in favor of using `&&` and `||` between separate test commands.\n\n### Common Numeric Comparisons\n\n- `-eq`: Equal to\n- `-ne`: Not equal to\n- `-lt`: Less than\n- `-le`: Less than or equal to\n- `-gt`: Greater than\n- `-ge`: Greater than or equal to\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `test` and `[ ]`?\nA. They are functionally identical. The `[` command is just another name for `test` that requires a closing `]` as its last argument.\n\n#### Q2. How do I test if a variable is empty?\nA. Use `test -z \"$variable\"` to check if it's empty or `test -n \"$variable\"` to check if it's not empty.\n\n#### Q3. How do I test if a file is newer than another?\nA. Use `test file1 -nt file2` to check if file1 is newer than file2.\n\n#### Q4. What's the difference between `[ ]` and `[[ ]]`?\nA. `[[ ]]` is a Bash extension that provides more features like pattern matching and better handling of empty variables, while `[ ]` is the standard POSIX test command.\n\n## References\n\nhttps://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html\n\n## Revisions\n\n- 2025/05/06 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1632,
    "output_tokens": 1221
  }
}