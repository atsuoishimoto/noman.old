{
  "id": "msg_01YXEFgEbfiCXvYpJYRwsAU4",
  "content": [
    {
      "text": "# grep command\n\nSearch for patterns in files.\n\n## Overview\n\n`grep` searches for text patterns in files or standard input. It's primarily used to find lines that match a specified pattern and display them. The command is essential for searching through logs, code, and text files, making it one of the most frequently used text-processing tools in Unix/Linux systems.\n\n## Options\n\n### **-i, --ignore-case**\n\nIgnore case distinctions in patterns and input data\n\n```console\n$ grep -i \"error\" log.txt\nERROR: Connection failed\nerror: file not found\nWarning: Some errors were detected\n```\n\n### **-v, --invert-match**\n\nSelect non-matching lines\n\n```console\n$ grep -v \"error\" log.txt\nConnection established\nProcess completed successfully\nSystem started\n```\n\n### **-r, --recursive**\n\nRead all files under each directory, recursively\n\n```console\n$ grep -r \"function\" /path/to/project\n/path/to/project/file1.js:function calculateTotal() {\n/path/to/project/lib/utils.js:function formatDate(date) {\n```\n\n### **-l, --files-with-matches**\n\nPrint only names of files containing matches\n\n```console\n$ grep -l \"error\" *.log\napp.log\nsystem.log\n```\n\n### **-n, --line-number**\n\nPrefix each line of output with the line number within its input file\n\n```console\n$ grep -n \"import\" script.py\n3:import os\n5:import sys\n12:import datetime\n```\n\n### **-c, --count**\n\nPrint only a count of matching lines per file\n\n```console\n$ grep -c \"error\" *.log\napp.log:15\nsystem.log:7\ndebug.log:0\n```\n\n### **-o, --only-matching**\n\nPrint only the matched parts of matching lines\n\n```console\n$ grep -o \"error\" log.txt\nerror\nerror\nerror\n```\n\n### **-A NUM, --after-context=NUM**\n\nPrint NUM lines of trailing context after matching lines\n\n```console\n$ grep -A 2 \"Exception\" error.log\nException in thread \"main\" java.lang.NullPointerException\n    at com.example.Main.process(Main.java:24)\n    at com.example.Main.main(Main.java:5)\n```\n\n### **-B NUM, --before-context=NUM**\n\nPrint NUM lines of leading context before matching lines\n\n```console\n$ grep -B 1 \"fatal\" system.log\nMay 4 15:30:22 server application[1234]: Critical error detected\nMay 4 15:30:23 server application[1234]: fatal: system halted\n```\n\n### **-E, --extended-regexp**\n\nInterpret pattern as an extended regular expression\n\n```console\n$ grep -E \"error|warning\" log.txt\nerror: file not found\nwarning: disk space low\n```\n\n## Usage Examples\n\n### Basic Pattern Search\n\n```console\n$ grep \"function\" script.js\nfunction calculateTotal() {\nfunction displayResults() {\n```\n\n### Combining Multiple Options\n\n```console\n$ grep -in \"error\" --color=auto log.txt\n15:Error: Unable to connect to database\n42:error: invalid configuration\n78:ERROR: Service unavailable\n```\n\n### Using Regular Expressions\n\n```console\n$ grep \"^[0-9]\" data.txt\n123 Main St\n456 Oak Ave\n789 Pine Rd\n```\n\n### Searching Multiple Files\n\n```console\n$ grep \"TODO\" *.py\nmain.py:# TODO: Implement error handling\nutils.py:# TODO: Optimize this algorithm\nconfig.py:# TODO: Add configuration validation\n```\n\n### Displaying Only Filenames with Matches\n\n```console\n$ grep -l \"error\" logs/*.log\nlogs/app.log\nlogs/system.log\n```\n\n## Tips:\n\n### Use Color Highlighting\n\nThe `--color=auto` option highlights matching text in color, making it easier to spot matches in large outputs.\n\n### Pipe with Other Commands\n\nCombine grep with other commands using pipes for powerful filtering:\n```console\n$ ps aux | grep \"nginx\"\n```\n\n### Use Word Boundaries\n\nThe `-w` option matches whole words only, preventing partial matches:\n```console\n$ grep -w \"log\" file.txt  # Matches \"log\" but not \"login\" or \"catalog\"\n```\n\n### Quiet Mode for Scripts\n\nUse `-q` for quiet mode when you only need to check if a pattern exists (returns exit status 0 if found):\n```console\n$ grep -q \"error\" log.txt && echo \"Errors found!\"\n```\n\n## Frequently Asked Questions\n\n#### Q1. How do I search for a pattern in multiple files?\nA. Simply list the files after the pattern: `grep \"pattern\" file1 file2 file3` or use wildcards: `grep \"pattern\" *.txt`.\n\n#### Q2. How can I search for a pattern that contains spaces?\nA. Enclose the pattern in quotes: `grep \"hello world\" file.txt`.\n\n#### Q3. How do I search for lines that don't contain a pattern?\nA. Use the `-v` option: `grep -v \"pattern\" file.txt`.\n\n#### Q4. Can grep search for multiple patterns at once?\nA. Yes, use the `-E` option with the pipe symbol: `grep -E \"pattern1|pattern2\" file.txt` or use `egrep \"pattern1|pattern2\" file.txt`.\n\n#### Q5. How do I make grep show only the matching part of a line?\nA. Use the `-o` option: `grep -o \"pattern\" file.txt`.\n\n## References\n\nhttps://www.gnu.org/software/grep/manual/grep.html\n\n## Revisions\n\n- 2025/05/06 Added -o option for displaying only matched parts of lines.\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 2946,
    "output_tokens": 1384
  }
}