{
  "id": "msg_01S4SRV8LrUBLeRmcd8pRy8U",
  "content": [
    {
      "text": "# strace コマンド\n\nプロセスのシステムコールとシグナルをトレースします。\n\n## 概要\n\n`strace` は Linux 用の診断およびデバッグユーティリティで、指定されたプログラムのシステムコールとシグナルをトレースします。プロセスによって行われるシステムコールと受信したシグナルを傍受して記録するため、トラブルシューティング、プログラムの動作の理解、アプリケーションの問題の診断に非常に役立つツールです。\n\n## オプション\n\n### **-f**\n\n現在トレースされているプロセスによって作成される子プロセスをトレースします。\n\n```console\n$ strace -f ./my_program\nexecve(\"./my_program\", [\"./my_program\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\nbrk(NULL)                               = 0x55a8a9899000\n[pid 12345] clone(child_stack=NULL, flags=CLONE_CHILD|SIGCHLD, ...) = 12346\n[pid 12346] execve(\"/bin/ls\", [\"ls\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\n```\n\n### **-p PID**\n\n指定された PID のプロセスにアタッチしてトレースを開始します。\n\n```console\n$ strace -p 1234\nstrace: Process 1234 attached\nread(3, \"Hello, world!\\n\", 4096)        = 14\nwrite(1, \"Hello, world!\\n\", 14)         = 14\n```\n\n### **-o FILENAME**\n\nトレース出力を stderr ではなくファイルに書き込みます。\n\n```console\n$ strace -o trace.log ls\n$ cat trace.log\nexecve(\"/bin/ls\", [\"ls\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\nbrk(NULL)                               = 0x55a8a9899000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\n```\n\n### **-e EXPR**\n\nトレースするイベントやトレース方法を修正する修飾式です。\n\n```console\n$ strace -e open,close ls\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nclose(3)                                = 0\nopen(\"/lib/x86_64-linux-gnu/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3\nclose(3)                                = 0\n```\n\n### **-c**\n\n各システムコールの時間、呼び出し回数、エラーをカウントし、要約を報告します。\n\n```console\n$ strace -c ls\n% time     seconds  usecs/call     calls    errors syscall\n------ ----------- ----------- --------- --------- ----------------\n 25.00    0.000125          21         6           mmap\n 20.00    0.000100          25         4           open\n 15.00    0.000075          25         3           read\n 10.00    0.000050          17         3           close\n------ ----------- ----------- --------- --------- ----------------\n100.00    0.000500                    45         5 total\n```\n\n### **-t**\n\nトレースの各行の先頭に時刻を付けます。\n\n```console\n$ strace -t ls\n14:15:23 execve(\"/bin/ls\", [\"ls\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\n14:15:23 brk(NULL)                      = 0x55a8a9899000\n14:15:23 access(\"/etc/ld.so.preload\", R_OK) = -1 ENOENT (No such file or directory)\n```\n\n## 使用例\n\n### プログラムを最初から最後までトレースする\n\n```console\n$ strace ls -l\nexecve(\"/bin/ls\", [\"ls\", \"-l\"], 0x7ffc8e5bb4a0 /* 58 vars */) = 0\nbrk(NULL)                               = 0x55a8a9899000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopenat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\n...\n```\n\n### 特定のシステムコールをトレースする\n\n```console\n$ strace -e trace=open,read,write ls\nopenat(AT_FDCWD, \"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0\\360\\23\\2\\0\\0\\0\\0\\0\"..., 832) = 832\nwrite(1, \"file1.txt  file2.txt  file3.txt\\n\", 32) = 32\n```\n\n### 実行中のプロセスにアタッチして出力をファイルに保存する\n\n```console\n$ strace -p 1234 -o process_trace.log\nstrace: Process 1234 attached\n^C\n$ cat process_trace.log\nread(4, \"data from socket\", 1024)       = 16\nwrite(1, \"data from socket\", 16)        = 16\n```\n\n## ヒント:\n\n### システムコールのフィルタリング\n\n`-e trace=` を使用して特定のシステムコールに焦点を当てます。例えば、`-e trace=network` はネットワーク関連の呼び出しのみを表示し、接続の問題をデバッグしやすくします。\n\n### パフォーマンスの問題を理解する\n\n`-c` を使用して各システムコールにかかる時間の要約を取得します。これにより、アプリケーションでどのシステムコールが最も時間がかかっているかを特定できます。\n\n### 子プロセスをトレースする\n\n子プロセスをフォークするプログラムをトレースする場合は、常に `-f` を使用してください。これがないと、親プロセスのアクティビティしか見えません。\n\n### 出力の冗長性を減らす\n\n大きなファイルやバッファの場合、`-s` の後に数字を付けて文字列出力の長さを制限します。例えば、`-s 100` は文字列を100文字に制限します。\n\n### トレースにタイムスタンプを付ける\n\n`-t` または `-tt`（マイクロ秒精度の場合）を追加してトレースにタイムスタンプを含めると、イベントを他のログと関連付けるのに役立ちます。\n\n## よくある質問\n\n#### Q1. strace と ltrace の違いは何ですか？\nA. `strace` はシステムコール（プログラムとカーネルの間の相互作用）をトレースし、`ltrace` はライブラリコール（プログラムとライブラリの間の相互作用）をトレースします。\n\n#### Q2. root 権限が必要なプログラムをトレースするにはどうすればよいですか？\nA. sudo で strace を実行します：`sudo strace command`。root が所有する実行中のプロセスにアタッチするには、`sudo strace -p PID` を使用します。\n\n#### Q3. strace でトレースすると、プログラムの実行が非常に遅くなるのはなぜですか？\nA. トレースはすべてのシステムコールを傍受するため、大きなオーバーヘッドが追加されます。これは正常な動作であり、タイミング結果を解釈する際に考慮する必要があります。\n\n#### Q4. ファイル関連の操作だけを見るにはどうすればよいですか？\nA. `strace -e trace=file command` を使用して、ファイル関連のシステムコールのみを表示します。\n\n#### Q5. strace はマルチスレッドアプリケーションをトレースできますか？\nA. はい、`strace -f` を使用してスレッド（Linux ではプロセスとして実装されています）をフォローできます。\n\n## 参考文献\n\nhttps://man7.org/linux/man-pages/man1/strace.1.html\n\n## 改訂履歴\n\n- 2025/05/05 初版",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1928,
    "output_tokens": 2372
  }
}