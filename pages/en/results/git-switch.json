{
  "id": "msg_01FL4uh5NqyLa4whzWPjTPBq",
  "content": [
    {
      "text": "# git switch command\n\nSwitch branches or restore working tree files.\n\n## Overview\n\nThe `git switch` command is used to switch between branches in a Git repository. It was introduced in Git 2.23 as a more user-friendly alternative to certain uses of `git checkout`. While `git checkout` serves multiple purposes, `git switch` is specifically designed for branch operations, making the command structure more intuitive.\n\n## Options\n\n### **-c, --create**\n\nCreate a new branch and switch to it.\n\n```console\n$ git switch -c feature-login\nSwitched to a new branch 'feature-login'\n```\n\n### **-d, --detach**\n\nSwitch to a commit in detached HEAD state.\n\n```console\n$ git switch -d 1a2b3c4\nNote: switching to '1a2b3c4'.\n\nYou are in 'detached HEAD' state...\nHEAD is now at 1a2b3c4 Add login functionality\n```\n\n### **--discard-changes**\n\nThrow away local modifications before switching.\n\n```console\n$ git switch --discard-changes main\nSwitched to branch 'main'\n```\n\n### **-f, --force**\n\nForce switch even if the index or working tree differs from HEAD.\n\n```console\n$ git switch -f main\nSwitched to branch 'main'\n```\n\n### **-m, --merge**\n\nPerform a three-way merge between the current branch, your working tree contents, and the new branch.\n\n```console\n$ git switch -m feature-branch\nSwitched to branch 'feature-branch'\n```\n\n### **--orphan**\n\nCreate a new orphan branch (a branch with no history).\n\n```console\n$ git switch --orphan new-root\nSwitched to a new branch 'new-root'\n```\n\n### **-t, --track**\n\nWhen creating a new branch, set up \"upstream\" configuration.\n\n```console\n$ git switch -c feature-branch -t origin/feature-branch\nBranch 'feature-branch' set up to track remote branch 'feature-branch' from 'origin'.\nSwitched to a new branch 'feature-branch'\n```\n\n### **-**\n\nSwitch to the previous branch.\n\n```console\n$ git switch -\nSwitched to branch 'main'\n```\n\n## Usage Examples\n\n### Basic Branch Switching\n\n```console\n$ git switch main\nSwitched to branch 'main'\n```\n\n### Creating and Switching to a New Branch\n\n```console\n$ git switch -c feature-auth\nSwitched to a new branch 'feature-auth'\n```\n\n### Switching to a Remote Branch\n\n```console\n$ git switch feature-branch\nBranch 'feature-branch' set up to track remote branch 'feature-branch' from 'origin'.\nSwitched to a new branch 'feature-branch'\n```\n\n### Switching to a Specific Commit\n\n```console\n$ git switch -d 1a2b3c4\nNote: switching to '1a2b3c4'.\n\nYou are in 'detached HEAD' state...\nHEAD is now at 1a2b3c4 Add login functionality\n```\n\n## Tips:\n\n### Use `-` to Toggle Between Branches\n\nThe dash shorthand (`git switch -`) allows you to quickly toggle between the current and previous branch, similar to `cd -` in the shell.\n\n### Combine with `git branch` for Better Workflow\n\nUse `git branch` to see available branches before switching: `git branch` followed by `git switch branch-name`.\n\n### Prefer `switch` Over `checkout` for Branch Operations\n\n`git switch` is more intuitive than `git checkout` for branch operations, as it's specifically designed for this purpose and has clearer semantics.\n\n### Create Tracking Branches Automatically\n\nWhen switching to a remote branch that doesn't exist locally, Git will automatically create a tracking branch if the branch name exists on a single remote.\n\n## Frequently Asked Questions\n\n#### Q1. What's the difference between `git switch` and `git checkout`?\nA. `git switch` is focused solely on branch operations, while `git checkout` has multiple purposes including branch switching, file restoration, and more. `git switch` was introduced to provide clearer, more specific commands.\n\n#### Q2. How do I create a new branch and switch to it?\nA. Use `git switch -c new-branch-name` to create and switch to a new branch in one command.\n\n#### Q3. How can I discard local changes when switching branches?\nA. Use `git switch --discard-changes branch-name` to discard local modifications before switching.\n\n#### Q4. How do I switch back to my previous branch?\nA. Use `git switch -` to switch to the previously checked out branch.\n\n#### Q5. What happens if I have uncommitted changes when switching branches?\nA. Git will prevent you from switching if there are conflicts. You can either commit your changes, stash them with `git stash`, or use the `--discard-changes` or `--merge` options.\n\n## References\n\nhttps://git-scm.com/docs/git-switch\n\n## Revisions\n\n- 2025/05/05 First revision",
      "type": "text"
    }
  ],
  "model": "claude-3-7-sonnet-20250219",
  "role": "assistant",
  "stop_reason": "end_turn",
  "stop_sequence": null,
  "type": "message",
  "usage": {
    "cache_creation_input_tokens": 0,
    "cache_read_input_tokens": 0,
    "input_tokens": 1692,
    "output_tokens": 1183
  }
}